package panelMain;

import component.EventItem;
import dao.SongDAO;
import entity.Song;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import swave.Login;
import swing.utilcomponent.ScrollBarCustom;
import utils.MsgBox;
import utils.XFile;

/**
 *
 * @author Admin
 */
public class AddSongPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddSong
     */
    private EventItem eventLblEditSong;
    private EventItem eventLblDeleteSong;
    private EventItem eventBtnAdd;
    private EventItem eventBtnDelete;
    private SongDAO sdao = new SongDAO();
    private String songName = "";
    private String songSinger = "";
    private ArrayList<Song> songList = new ArrayList<>();
    private Song editSong;

    public EventItem getEventBtnAdd() {
        return eventBtnAdd;
    }

    public void setEventBtnAdd(EventItem eventBtnAdd) {
        this.eventBtnAdd = eventBtnAdd;
    }

    public EventItem getEventBtnDelete() {
        return eventBtnDelete;
    }

    public void setEventBtnDelete(EventItem eventBtnDelete) {
        this.eventBtnDelete = eventBtnDelete;
    }

    public EventItem getEventLblEditSong() {
        return eventLblEditSong;
    }

    public void setEventLblEditSong(EventItem eventLblEditSong) {
        this.eventLblEditSong = eventLblEditSong;
    }

    public EventItem getEventLblDeleteSong() {
        return eventLblDeleteSong;
    }

    public void setEventLblDeleteSong(EventItem eventLblDeleteSong) {
        this.eventLblDeleteSong = eventLblDeleteSong;
    }

    public AddSongPanel() {
        try {
            this.editSong = new Song();
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        init();
        //account = adao.selectById(Auth.user.getUserID());
        clearForm(1);
        clearForm(2);
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlAddSongMenu = new javax.swing.JPanel();
        lblAddSongMenuItem = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblEditSongMenuItem = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblListSongMenuItem = new javax.swing.JLabel();
        lrpnlAddSong = new javax.swing.JLayeredPane();
        pnlSubAddSong = new javax.swing.JPanel();
        lblTitleAddSong = new javax.swing.JLabel();
        pnlAddSongContent = new javax.swing.JPanel();
        pnlAddSongDetail = new javax.swing.JPanel();
        lblAddNameSong = new javax.swing.JLabel();
        lblAddWriter = new javax.swing.JLabel();
        lblAddSinger = new javax.swing.JLabel();
        lblAddGenre = new javax.swing.JLabel();
        lblAddLyrics = new javax.swing.JLabel();
        lblAddPic = new javax.swing.JLabel();
        lblAddMP3 = new javax.swing.JLabel();
        btnAddLyrics = new swing.utilcomponent.Button();
        btnAddPic = new swing.utilcomponent.Button();
        btnAddMP3 = new swing.utilcomponent.Button();
        pnlAddSongName = new javax.swing.JPanel();
        txtAddSongName = new javax.swing.JTextField();
        lblPlaceHolderAddSongName = new javax.swing.JLabel();
        lblBorder1 = new javax.swing.JLabel();
        pnlAddWriter = new javax.swing.JPanel();
        txtAddWriter = new javax.swing.JTextField();
        lblPlaceHolderAddWriter = new javax.swing.JLabel();
        lblBorder2 = new javax.swing.JLabel();
        pnlAddSinger = new javax.swing.JPanel();
        txtAddSinger = new javax.swing.JTextField();
        lblPlaceHolderAddSinger = new javax.swing.JLabel();
        lblBorder3 = new javax.swing.JLabel();
        pnlAddGenre = new javax.swing.JPanel();
        txtAddGenre = new javax.swing.JTextField();
        lblPlaceHolderAddGerne = new javax.swing.JLabel();
        lblBorder4 = new javax.swing.JLabel();
        pnlAddInfo = new javax.swing.JPanel();
        lblAddPicDemo = new model.borderImage();
        lblAddDemoSong = new javax.swing.JLabel();
        btnAddSong = new swing.utilcomponent.Button();
        pnlSubEditSong = new javax.swing.JPanel();
        lblTitleEditSong = new javax.swing.JLabel();
        pnlEditSongContent = new javax.swing.JPanel();
        pnlEditSongDetail = new javax.swing.JPanel();
        lblEditNameSong = new javax.swing.JLabel();
        lblEditWriter = new javax.swing.JLabel();
        lblEditSinger = new javax.swing.JLabel();
        lblEditGenre = new javax.swing.JLabel();
        lblEditLyrics = new javax.swing.JLabel();
        lblEditPic = new javax.swing.JLabel();
        lblEditMP3 = new javax.swing.JLabel();
        btnEditLyrics = new swing.utilcomponent.Button();
        btnEditPic = new swing.utilcomponent.Button();
        btnEditMP3 = new swing.utilcomponent.Button();
        pnlEditSongName = new javax.swing.JPanel();
        txtEditSongName = new javax.swing.JTextField();
        lblPlaceHolderEditSongName = new javax.swing.JLabel();
        lblBorder5 = new javax.swing.JLabel();
        pnlEditWriter = new javax.swing.JPanel();
        txtEditWriter = new javax.swing.JTextField();
        lblPlaceHolderEditWriter = new javax.swing.JLabel();
        lblBorder6 = new javax.swing.JLabel();
        pnlEditSinger = new javax.swing.JPanel();
        txtEditSinger = new javax.swing.JTextField();
        lblPlaceHolderEditSinger = new javax.swing.JLabel();
        lblBorder7 = new javax.swing.JLabel();
        pnlEditGenre = new javax.swing.JPanel();
        txtEditGenre = new javax.swing.JTextField();
        lblPlaceHolderEditGerne = new javax.swing.JLabel();
        lblBorder8 = new javax.swing.JLabel();
        pnlEditInfo = new javax.swing.JPanel();
        lblEditPicDemo = new model.borderImage();
        lblEditDemoSong = new javax.swing.JLabel();
        btnEditSong = new swing.utilcomponent.Button();
        pnlSubListSong = new javax.swing.JPanel();
        lblTitleListSong = new javax.swing.JLabel();
        pnlListSongContent = new javax.swing.JPanel();
        pnlListSongInfo = new javax.swing.JPanel();
        lblPosition = new javax.swing.JLabel();
        lblSongName = new javax.swing.JLabel();
        lblEdit = new javax.swing.JLabel();
        lblSinger = new javax.swing.JLabel();
        lblWriter = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        scrPane = new javax.swing.JScrollPane();
        pnlListSongDetails = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 153, 0));
        setMaximumSize(new java.awt.Dimension(1283, 555));
        setMinimumSize(new java.awt.Dimension(1283, 555));
        setPreferredSize(new java.awt.Dimension(1283, 555));
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 25, 5));

        pnlAddSongMenu.setBackground(new java.awt.Color(204, 153, 0));
        pnlAddSongMenu.setMaximumSize(new java.awt.Dimension(300, 41));
        pnlAddSongMenu.setMinimumSize(new java.awt.Dimension(300, 41));
        pnlAddSongMenu.setPreferredSize(new java.awt.Dimension(300, 41));
        pnlAddSongMenu.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 15, 5));
        pnlAddSongMenu.add(lblAddSongMenuItem);

        jSeparator1.setBackground(new java.awt.Color(199, 199, 199));
        jSeparator1.setForeground(new java.awt.Color(199, 199, 199));
        jSeparator1.setMaximumSize(new java.awt.Dimension(1, 16));
        jSeparator1.setMinimumSize(new java.awt.Dimension(1, 16));
        jSeparator1.setOpaque(true);
        jSeparator1.setPreferredSize(new java.awt.Dimension(1, 16));
        pnlAddSongMenu.add(jSeparator1);

        lblEditSongMenuItem.setText("jLabel1");
        pnlAddSongMenu.add(lblEditSongMenuItem);

        jSeparator2.setBackground(new java.awt.Color(199, 199, 199));
        jSeparator2.setForeground(new java.awt.Color(199, 199, 199));
        jSeparator2.setMaximumSize(new java.awt.Dimension(1, 16));
        jSeparator2.setMinimumSize(new java.awt.Dimension(1, 16));
        jSeparator2.setOpaque(true);
        jSeparator2.setPreferredSize(new java.awt.Dimension(1, 16));
        pnlAddSongMenu.add(jSeparator2);

        lblListSongMenuItem.setText("jLabel1");
        pnlAddSongMenu.add(lblListSongMenuItem);

        add(pnlAddSongMenu);

        lrpnlAddSong.setBackground(new java.awt.Color(102, 255, 102));
        lrpnlAddSong.setMaximumSize(new java.awt.Dimension(1232, 483));
        lrpnlAddSong.setMinimumSize(new java.awt.Dimension(1232, 483));
        lrpnlAddSong.setLayout(new java.awt.CardLayout());

        pnlSubAddSong.setMaximumSize(new java.awt.Dimension(1230, 480));
        pnlSubAddSong.setMinimumSize(new java.awt.Dimension(1230, 480));
        pnlSubAddSong.setPreferredSize(new java.awt.Dimension(1230, 480));
        pnlSubAddSong.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 20, 5));

        lblTitleAddSong.setText("Thêm bài hát");
        pnlSubAddSong.add(lblTitleAddSong);

        pnlAddSongContent.setMaximumSize(new java.awt.Dimension(1230, 427));
        pnlAddSongContent.setMinimumSize(new java.awt.Dimension(1230, 427));
        pnlAddSongContent.setPreferredSize(new java.awt.Dimension(1230, 427));

        pnlAddSongDetail.setLayout(new java.awt.GridBagLayout());

        lblAddNameSong.setText("Tên bài hát:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddNameSong, gridBagConstraints);

        lblAddWriter.setText("Nhạc sĩ:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddWriter, gridBagConstraints);

        lblAddSinger.setText("Ca sĩ:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddSinger, gridBagConstraints);

        lblAddGenre.setText("Thể loại:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddGenre, gridBagConstraints);

        lblAddLyrics.setText("Lời bài hát:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddLyrics, gridBagConstraints);

        lblAddPic.setText("Hình ảnh:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddPic, gridBagConstraints);

        lblAddMP3.setText("MP3:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlAddSongDetail.add(lblAddMP3, gridBagConstraints);

        btnAddLyrics.setText("Chưa có file được chọn");
        btnAddLyrics.setColor1(new java.awt.Color(67, 67, 67));
        btnAddLyrics.setColor2(new java.awt.Color(67, 67, 67));
        btnAddLyrics.setMaximumSize(new java.awt.Dimension(300, 36));
        btnAddLyrics.setMinimumSize(new java.awt.Dimension(300, 36));
        btnAddLyrics.setPreferredSize(new java.awt.Dimension(300, 36));
        btnAddLyrics.setRadious(new int[] {10, 10});
        btnAddLyrics.setRequestFocusEnabled(false);
        btnAddLyrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLyricsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        pnlAddSongDetail.add(btnAddLyrics, gridBagConstraints);

        btnAddPic.setText("Chưa có file được chọn");
        btnAddPic.setColor1(new java.awt.Color(67, 67, 67));
        btnAddPic.setColor2(new java.awt.Color(67, 67, 67));
        btnAddPic.setMaximumSize(new java.awt.Dimension(300, 36));
        btnAddPic.setMinimumSize(new java.awt.Dimension(300, 36));
        btnAddPic.setPreferredSize(new java.awt.Dimension(300, 36));
        btnAddPic.setRadious(new int[] {10, 10});
        btnAddPic.setRequestFocusEnabled(false);
        btnAddPic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        pnlAddSongDetail.add(btnAddPic, gridBagConstraints);

        btnAddMP3.setText("Chưa có file được chọn");
        btnAddMP3.setColor1(new java.awt.Color(67, 67, 67));
        btnAddMP3.setColor2(new java.awt.Color(67, 67, 67));
        btnAddMP3.setMaximumSize(new java.awt.Dimension(300, 36));
        btnAddMP3.setMinimumSize(new java.awt.Dimension(300, 36));
        btnAddMP3.setPreferredSize(new java.awt.Dimension(300, 36));
        btnAddMP3.setRadious(new int[] {10, 10});
        btnAddMP3.setRequestFocusEnabled(false);
        btnAddMP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMP3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        pnlAddSongDetail.add(btnAddMP3, gridBagConstraints);

        pnlAddSongName.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlAddSongName.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlAddSongName.setName(""); // NOI18N
        pnlAddSongName.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlAddSongName.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAddSongName.setBorder(null);
        txtAddSongName.setMaximumSize(new java.awt.Dimension(300, 36));
        txtAddSongName.setMinimumSize(new java.awt.Dimension(300, 36));
        txtAddSongName.setName(""); // NOI18N
        txtAddSongName.setPreferredSize(new java.awt.Dimension(300, 36));
        txtAddSongName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtAddSongNameCaretUpdate(evt);
            }
        });
        txtAddSongName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddSongNameActionPerformed(evt);
            }
        });
        pnlAddSongName.add(txtAddSongName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderAddSongName.setText("Tên bài hát");
        pnlAddSongName.add(lblPlaceHolderAddSongName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlAddSongName.add(lblBorder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlAddSongDetail.add(pnlAddSongName, new java.awt.GridBagConstraints());

        pnlAddWriter.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlAddWriter.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlAddWriter.setName(""); // NOI18N
        pnlAddWriter.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlAddWriter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAddWriter.setBorder(null);
        txtAddWriter.setMaximumSize(new java.awt.Dimension(300, 36));
        txtAddWriter.setMinimumSize(new java.awt.Dimension(300, 36));
        txtAddWriter.setName(""); // NOI18N
        txtAddWriter.setPreferredSize(new java.awt.Dimension(300, 36));
        txtAddWriter.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtAddWriterCaretUpdate(evt);
            }
        });
        txtAddWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddWriterActionPerformed(evt);
            }
        });
        pnlAddWriter.add(txtAddWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderAddWriter.setText("Nhạc sĩ");
        pnlAddWriter.add(lblPlaceHolderAddWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlAddWriter.add(lblBorder2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlAddSongDetail.add(pnlAddWriter, gridBagConstraints);

        pnlAddSinger.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlAddSinger.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlAddSinger.setName(""); // NOI18N
        pnlAddSinger.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlAddSinger.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAddSinger.setBorder(null);
        txtAddSinger.setMaximumSize(new java.awt.Dimension(300, 36));
        txtAddSinger.setMinimumSize(new java.awt.Dimension(300, 36));
        txtAddSinger.setName(""); // NOI18N
        txtAddSinger.setPreferredSize(new java.awt.Dimension(300, 36));
        txtAddSinger.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtAddSingerCaretUpdate(evt);
            }
        });
        txtAddSinger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddSingerActionPerformed(evt);
            }
        });
        pnlAddSinger.add(txtAddSinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderAddSinger.setText("Ca sĩ");
        pnlAddSinger.add(lblPlaceHolderAddSinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlAddSinger.add(lblBorder3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        pnlAddSongDetail.add(pnlAddSinger, gridBagConstraints);

        pnlAddGenre.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlAddGenre.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlAddGenre.setName(""); // NOI18N
        pnlAddGenre.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlAddGenre.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAddGenre.setBorder(null);
        txtAddGenre.setMaximumSize(new java.awt.Dimension(300, 36));
        txtAddGenre.setMinimumSize(new java.awt.Dimension(300, 36));
        txtAddGenre.setName(""); // NOI18N
        txtAddGenre.setPreferredSize(new java.awt.Dimension(300, 36));
        txtAddGenre.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtAddGenreCaretUpdate(evt);
            }
        });
        txtAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddGenreActionPerformed(evt);
            }
        });
        pnlAddGenre.add(txtAddGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderAddGerne.setText("Thể loại bài hát");
        pnlAddGenre.add(lblPlaceHolderAddGerne, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlAddGenre.add(lblBorder4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        pnlAddSongDetail.add(pnlAddGenre, gridBagConstraints);

        pnlAddInfo.setMaximumSize(new java.awt.Dimension(300, 300));
        pnlAddInfo.setMinimumSize(new java.awt.Dimension(300, 300));
        pnlAddInfo.setPreferredSize(new java.awt.Dimension(300, 300));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 25);
        flowLayout1.setAlignOnBaseline(true);
        pnlAddInfo.setLayout(flowLayout1);

        lblAddPicDemo.setMaximumSize(new java.awt.Dimension(150, 150));
        lblAddPicDemo.setMinimumSize(new java.awt.Dimension(150, 150));
        lblAddPicDemo.setPreferredSize(new java.awt.Dimension(150, 150));
        lblAddPicDemo.setSizeImage(new int[] {150, 150});

        javax.swing.GroupLayout lblAddPicDemoLayout = new javax.swing.GroupLayout(lblAddPicDemo);
        lblAddPicDemo.setLayout(lblAddPicDemoLayout);
        lblAddPicDemoLayout.setHorizontalGroup(
            lblAddPicDemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lblAddPicDemoLayout.setVerticalGroup(
            lblAddPicDemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlAddInfo.add(lblAddPicDemo);

        lblAddDemoSong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddDemoSong.setText("Midnight - Taylor Swift");
        lblAddDemoSong.setMaximumSize(new java.awt.Dimension(270, 19));
        lblAddDemoSong.setMinimumSize(new java.awt.Dimension(270, 19));
        lblAddDemoSong.setPreferredSize(new java.awt.Dimension(270, 19));
        pnlAddInfo.add(lblAddDemoSong);

        btnAddSong.setText("Thêm bài hát");
        btnAddSong.setColor1(new java.awt.Color(67, 67, 67));
        btnAddSong.setColor2(new java.awt.Color(67, 67, 67));
        btnAddSong.setMaximumSize(new java.awt.Dimension(164, 41));
        btnAddSong.setMinimumSize(new java.awt.Dimension(164, 41));
        btnAddSong.setPreferredSize(new java.awt.Dimension(164, 41));
        btnAddSong.setRadious(new int[] {10, 10});
        btnAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSongActionPerformed(evt);
            }
        });
        pnlAddInfo.add(btnAddSong);

        javax.swing.GroupLayout pnlAddSongContentLayout = new javax.swing.GroupLayout(pnlAddSongContent);
        pnlAddSongContent.setLayout(pnlAddSongContentLayout);
        pnlAddSongContentLayout.setHorizontalGroup(
            pnlAddSongContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddSongContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAddSongDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(pnlAddInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151))
        );
        pnlAddSongContentLayout.setVerticalGroup(
            pnlAddSongContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddSongContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAddSongDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlAddSongContentLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(pnlAddInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pnlSubAddSong.add(pnlAddSongContent);

        lrpnlAddSong.add(pnlSubAddSong, "card2");

        pnlSubEditSong.setMaximumSize(new java.awt.Dimension(1230, 480));
        pnlSubEditSong.setMinimumSize(new java.awt.Dimension(1230, 480));
        pnlSubEditSong.setPreferredSize(new java.awt.Dimension(1230, 480));
        pnlSubEditSong.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 20, 5));

        lblTitleEditSong.setText("Sửa bài hát");
        pnlSubEditSong.add(lblTitleEditSong);

        pnlEditSongContent.setMaximumSize(new java.awt.Dimension(1230, 427));
        pnlEditSongContent.setMinimumSize(new java.awt.Dimension(1230, 427));

        pnlEditSongDetail.setLayout(new java.awt.GridBagLayout());

        lblEditNameSong.setText("Tên bài hát:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditNameSong, gridBagConstraints);

        lblEditWriter.setText("Nhạc sĩ:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditWriter, gridBagConstraints);

        lblEditSinger.setText("Ca sĩ:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditSinger, gridBagConstraints);

        lblEditGenre.setText("Thể loại:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditGenre, gridBagConstraints);

        lblEditLyrics.setText("Lời bài hát:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditLyrics, gridBagConstraints);

        lblEditPic.setText("Hình ảnh:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditPic, gridBagConstraints);

        lblEditMP3.setText("MP3:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEditSongDetail.add(lblEditMP3, gridBagConstraints);

        btnEditLyrics.setText("Chưa có file được chọn");
        btnEditLyrics.setColor1(new java.awt.Color(67, 67, 67));
        btnEditLyrics.setColor2(new java.awt.Color(67, 67, 67));
        btnEditLyrics.setMaximumSize(new java.awt.Dimension(300, 36));
        btnEditLyrics.setMinimumSize(new java.awt.Dimension(300, 36));
        btnEditLyrics.setPreferredSize(new java.awt.Dimension(300, 36));
        btnEditLyrics.setRadious(new int[] {10, 10});
        btnEditLyrics.setRequestFocusEnabled(false);
        btnEditLyrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditLyricsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        pnlEditSongDetail.add(btnEditLyrics, gridBagConstraints);

        btnEditPic.setText("Chưa có file được chọn");
        btnEditPic.setColor1(new java.awt.Color(67, 67, 67));
        btnEditPic.setColor2(new java.awt.Color(67, 67, 67));
        btnEditPic.setMaximumSize(new java.awt.Dimension(300, 36));
        btnEditPic.setMinimumSize(new java.awt.Dimension(300, 36));
        btnEditPic.setPreferredSize(new java.awt.Dimension(300, 36));
        btnEditPic.setRadious(new int[] {10, 10});
        btnEditPic.setRequestFocusEnabled(false);
        btnEditPic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        pnlEditSongDetail.add(btnEditPic, gridBagConstraints);

        btnEditMP3.setText("Chưa có file được chọn");
        btnEditMP3.setColor1(new java.awt.Color(67, 67, 67));
        btnEditMP3.setColor2(new java.awt.Color(67, 67, 67));
        btnEditMP3.setMaximumSize(new java.awt.Dimension(300, 36));
        btnEditMP3.setMinimumSize(new java.awt.Dimension(300, 36));
        btnEditMP3.setPreferredSize(new java.awt.Dimension(300, 36));
        btnEditMP3.setRadious(new int[] {10, 10});
        btnEditMP3.setRequestFocusEnabled(false);
        btnEditMP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMP3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        pnlEditSongDetail.add(btnEditMP3, gridBagConstraints);

        pnlEditSongName.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlEditSongName.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlEditSongName.setName(""); // NOI18N
        pnlEditSongName.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlEditSongName.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEditSongName.setBorder(null);
        txtEditSongName.setMaximumSize(new java.awt.Dimension(300, 36));
        txtEditSongName.setMinimumSize(new java.awt.Dimension(300, 36));
        txtEditSongName.setName(""); // NOI18N
        txtEditSongName.setPreferredSize(new java.awt.Dimension(300, 36));
        txtEditSongName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtEditSongNameCaretUpdate(evt);
            }
        });
        txtEditSongName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditSongNameActionPerformed(evt);
            }
        });
        pnlEditSongName.add(txtEditSongName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderEditSongName.setText("Tên bài hát");
        pnlEditSongName.add(lblPlaceHolderEditSongName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlEditSongName.add(lblBorder5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlEditSongDetail.add(pnlEditSongName, new java.awt.GridBagConstraints());

        pnlEditWriter.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlEditWriter.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlEditWriter.setName(""); // NOI18N
        pnlEditWriter.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlEditWriter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEditWriter.setBorder(null);
        txtEditWriter.setMaximumSize(new java.awt.Dimension(300, 36));
        txtEditWriter.setMinimumSize(new java.awt.Dimension(300, 36));
        txtEditWriter.setName(""); // NOI18N
        txtEditWriter.setPreferredSize(new java.awt.Dimension(300, 36));
        txtEditWriter.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtEditWriterCaretUpdate(evt);
            }
        });
        txtEditWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditWriterActionPerformed(evt);
            }
        });
        pnlEditWriter.add(txtEditWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderEditWriter.setText("Nhạc sĩ");
        pnlEditWriter.add(lblPlaceHolderEditWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlEditWriter.add(lblBorder6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlEditSongDetail.add(pnlEditWriter, gridBagConstraints);

        pnlEditSinger.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlEditSinger.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlEditSinger.setName(""); // NOI18N
        pnlEditSinger.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlEditSinger.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEditSinger.setBorder(null);
        txtEditSinger.setMaximumSize(new java.awt.Dimension(300, 36));
        txtEditSinger.setMinimumSize(new java.awt.Dimension(300, 36));
        txtEditSinger.setName(""); // NOI18N
        txtEditSinger.setPreferredSize(new java.awt.Dimension(300, 36));
        txtEditSinger.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtEditSingerCaretUpdate(evt);
            }
        });
        txtEditSinger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditSingerActionPerformed(evt);
            }
        });
        pnlEditSinger.add(txtEditSinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderEditSinger.setText("Ca sĩ");
        pnlEditSinger.add(lblPlaceHolderEditSinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlEditSinger.add(lblBorder7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        pnlEditSongDetail.add(pnlEditSinger, gridBagConstraints);

        pnlEditGenre.setMaximumSize(new java.awt.Dimension(302, 38));
        pnlEditGenre.setMinimumSize(new java.awt.Dimension(302, 38));
        pnlEditGenre.setName(""); // NOI18N
        pnlEditGenre.setPreferredSize(new java.awt.Dimension(302, 38));
        pnlEditGenre.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEditGenre.setBorder(null);
        txtEditGenre.setMaximumSize(new java.awt.Dimension(300, 36));
        txtEditGenre.setMinimumSize(new java.awt.Dimension(300, 36));
        txtEditGenre.setName(""); // NOI18N
        txtEditGenre.setPreferredSize(new java.awt.Dimension(300, 36));
        txtEditGenre.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtEditGenreCaretUpdate(evt);
            }
        });
        txtEditGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEditGenreActionPerformed(evt);
            }
        });
        pnlEditGenre.add(txtEditGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 280, -1));

        lblPlaceHolderEditGerne.setText("Thể loại bài hát");
        pnlEditGenre.add(lblPlaceHolderEditGerne, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblBorder8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/components/txtAddSong.png"))); // NOI18N
        pnlEditGenre.add(lblBorder8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        pnlEditSongDetail.add(pnlEditGenre, gridBagConstraints);

        pnlEditInfo.setMaximumSize(new java.awt.Dimension(300, 300));
        pnlEditInfo.setMinimumSize(new java.awt.Dimension(300, 300));
        pnlEditInfo.setPreferredSize(new java.awt.Dimension(300, 300));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 25);
        flowLayout2.setAlignOnBaseline(true);
        pnlEditInfo.setLayout(flowLayout2);

        lblEditPicDemo.setMaximumSize(new java.awt.Dimension(150, 150));
        lblEditPicDemo.setMinimumSize(new java.awt.Dimension(150, 150));
        lblEditPicDemo.setPreferredSize(new java.awt.Dimension(150, 150));
        lblEditPicDemo.setSizeImage(new int[] {150, 150});

        javax.swing.GroupLayout lblEditPicDemoLayout = new javax.swing.GroupLayout(lblEditPicDemo);
        lblEditPicDemo.setLayout(lblEditPicDemoLayout);
        lblEditPicDemoLayout.setHorizontalGroup(
            lblEditPicDemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lblEditPicDemoLayout.setVerticalGroup(
            lblEditPicDemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlEditInfo.add(lblEditPicDemo);

        lblEditDemoSong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEditDemoSong.setText("Midnight - Taylor Swift");
        lblEditDemoSong.setMaximumSize(new java.awt.Dimension(270, 19));
        lblEditDemoSong.setMinimumSize(new java.awt.Dimension(270, 19));
        lblEditDemoSong.setPreferredSize(new java.awt.Dimension(270, 19));
        pnlEditInfo.add(lblEditDemoSong);

        btnEditSong.setText("Sửa thông tin bài hát");
        btnEditSong.setColor1(new java.awt.Color(67, 67, 67));
        btnEditSong.setColor2(new java.awt.Color(67, 67, 67));
        btnEditSong.setMaximumSize(new java.awt.Dimension(164, 41));
        btnEditSong.setMinimumSize(new java.awt.Dimension(164, 41));
        btnEditSong.setPreferredSize(new java.awt.Dimension(164, 41));
        btnEditSong.setRadious(new int[] {10, 10});
        btnEditSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSongActionPerformed(evt);
            }
        });
        pnlEditInfo.add(btnEditSong);

        javax.swing.GroupLayout pnlEditSongContentLayout = new javax.swing.GroupLayout(pnlEditSongContent);
        pnlEditSongContent.setLayout(pnlEditSongContentLayout);
        pnlEditSongContentLayout.setHorizontalGroup(
            pnlEditSongContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditSongContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEditSongDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(pnlEditInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151))
        );
        pnlEditSongContentLayout.setVerticalGroup(
            pnlEditSongContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditSongContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEditSongDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlEditSongContentLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(pnlEditInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pnlSubEditSong.add(pnlEditSongContent);

        lrpnlAddSong.add(pnlSubEditSong, "card4");

        pnlSubListSong.setBackground(new java.awt.Color(255, 0, 102));
        pnlSubListSong.setMaximumSize(new java.awt.Dimension(1230, 480));
        pnlSubListSong.setMinimumSize(new java.awt.Dimension(1230, 480));
        pnlSubListSong.setOpaque(false);
        pnlSubListSong.setPreferredSize(new java.awt.Dimension(1230, 480));
        pnlSubListSong.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 20, 5));

        lblTitleListSong.setText("Danh sách bài hát ");
        pnlSubListSong.add(lblTitleListSong);

        pnlListSongContent.setMaximumSize(new java.awt.Dimension(1230, 427));
        pnlListSongContent.setMinimumSize(new java.awt.Dimension(1230, 427));
        pnlListSongContent.setOpaque(false);
        pnlListSongContent.setPreferredSize(new java.awt.Dimension(1230, 427));
        pnlListSongContent.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 30, 5));

        pnlListSongInfo.setMaximumSize(new java.awt.Dimension(1073, 59));
        pnlListSongInfo.setMinimumSize(new java.awt.Dimension(1073, 59));
        pnlListSongInfo.setOpaque(false);
        pnlListSongInfo.setPreferredSize(new java.awt.Dimension(1073, 59));
        pnlListSongInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPosition.setText("ID");
        lblPosition.setMaximumSize(new java.awt.Dimension(97, 51));
        lblPosition.setMinimumSize(new java.awt.Dimension(97, 51));
        lblPosition.setName(""); // NOI18N
        lblPosition.setPreferredSize(new java.awt.Dimension(97, 51));
        pnlListSongInfo.add(lblPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblSongName.setText("Tên bài hát");
        lblSongName.setMaximumSize(new java.awt.Dimension(194, 51));
        lblSongName.setMinimumSize(new java.awt.Dimension(194, 51));
        lblSongName.setPreferredSize(new java.awt.Dimension(194, 51));
        pnlListSongInfo.add(lblSongName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        lblEdit.setText("Chỉnh sửa");
        lblEdit.setMaximumSize(new java.awt.Dimension(194, 51));
        lblEdit.setMinimumSize(new java.awt.Dimension(194, 51));
        lblEdit.setPreferredSize(new java.awt.Dimension(194, 51));
        lblEdit.setVerifyInputWhenFocusTarget(false);
        pnlListSongInfo.add(lblEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 10, -1, -1));

        lblSinger.setText("Ca sĩ");
        lblSinger.setMaximumSize(new java.awt.Dimension(194, 51));
        lblSinger.setMinimumSize(new java.awt.Dimension(194, 51));
        lblSinger.setPreferredSize(new java.awt.Dimension(194, 51));
        lblSinger.setVerifyInputWhenFocusTarget(false);
        pnlListSongInfo.add(lblSinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, -1, -1));

        lblWriter.setText("Nhạc sĩ");
        lblWriter.setMaximumSize(new java.awt.Dimension(194, 51));
        lblWriter.setMinimumSize(new java.awt.Dimension(194, 51));
        lblWriter.setPreferredSize(new java.awt.Dimension(194, 51));
        pnlListSongInfo.add(lblWriter, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        pnlListSongContent.add(pnlListSongInfo);

        jSeparator3.setBackground(new java.awt.Color(199, 199, 199));
        jSeparator3.setForeground(new java.awt.Color(199, 199, 199));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setMaximumSize(new java.awt.Dimension(1073, 1));
        jSeparator3.setMinimumSize(new java.awt.Dimension(1073, 1));
        jSeparator3.setOpaque(true);
        jSeparator3.setPreferredSize(new java.awt.Dimension(1073, 1));
        pnlListSongContent.add(jSeparator3);

        scrPane.setBackground(new java.awt.Color(204, 255, 204));
        scrPane.setBorder(null);
        scrPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrPane.setMaximumSize(new java.awt.Dimension(1073, 350));
        scrPane.setMinimumSize(new java.awt.Dimension(1073, 350));
        scrPane.setOpaque(false);
        scrPane.setPreferredSize(new java.awt.Dimension(1073, 350));

        pnlListSongDetails.setBackground(new java.awt.Color(51, 255, 204));
        pnlListSongDetails.setMaximumSize(new java.awt.Dimension(1073, 350));
        pnlListSongDetails.setMinimumSize(new java.awt.Dimension(1073, 350));
        pnlListSongDetails.setPreferredSize(new java.awt.Dimension(1073, 350));
        pnlListSongDetails.setLayout(new java.awt.GridBagLayout());
        scrPane.setViewportView(pnlListSongDetails);

        pnlListSongContent.add(scrPane);

        pnlSubListSong.add(pnlListSongContent);

        lrpnlAddSong.add(pnlSubListSong, "card4");

        add(lrpnlAddSong);
    }// </editor-fold>//GEN-END:initComponents

    private void txtEditGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditGenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEditGenreActionPerformed

    private void txtEditGenreCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtEditGenreCaretUpdate
        // TODO add your handling code here:
        if (!txtEditGenre.getText().equals("")) {
            lblPlaceHolderEditGerne.setText("");
        } else {
            lblPlaceHolderEditGerne.setText("Thể loại bài hát");
        }
    }//GEN-LAST:event_txtEditGenreCaretUpdate

    private void txtEditSingerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditSingerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEditSingerActionPerformed

    private void txtEditSingerCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtEditSingerCaretUpdate
        // TODO add your handling code here:
        if (!txtEditSinger.getText().equals("")) {
            lblPlaceHolderEditSinger.setText("");
            songSinger = txtEditSinger.getText();
            setTextLblEditDemoSong();
        } else {
            lblPlaceHolderEditSinger.setText("Ca sĩ");
            songSinger = "";
            setTextLblEditDemoSong();
        }
    }//GEN-LAST:event_txtEditSingerCaretUpdate

    private void txtEditWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditWriterActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtEditWriterActionPerformed

    private void txtEditWriterCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtEditWriterCaretUpdate
        // TODO add your handling code here:
        if (!txtEditWriter.getText().equals("")) {
            lblPlaceHolderEditWriter.setText("");
        } else {
            lblPlaceHolderEditWriter.setText("Nhạc sĩ");
        }
    }//GEN-LAST:event_txtEditWriterCaretUpdate

    private void txtEditSongNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEditSongNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEditSongNameActionPerformed

    private void txtEditSongNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtEditSongNameCaretUpdate
        // TODO add your handling code here:
        if (!txtEditSongName.getText().equals("")) {
            lblPlaceHolderEditSongName.setText("");
            songName = txtEditSongName.getText();
            setTextLblEditDemoSong();
        } else {
            lblPlaceHolderEditSongName.setText("Tên bài hát");
            songName = "";
            setTextLblEditDemoSong();
        }
    }//GEN-LAST:event_txtEditSongNameCaretUpdate

    private void txtAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddGenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddGenreActionPerformed

    private void txtAddGenreCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtAddGenreCaretUpdate
        // TODO add your handling code here:
        if (!txtAddGenre.getText().equals("")) {
            lblPlaceHolderAddGerne.setText("");
        } else {
            lblPlaceHolderAddGerne.setText("Thể loại bài hát");
        }
    }//GEN-LAST:event_txtAddGenreCaretUpdate

    private void txtAddSingerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddSingerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddSingerActionPerformed

    private void txtAddSingerCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtAddSingerCaretUpdate
        // TODO add your handling code here:
        if (!txtAddSinger.getText().equals("")) {
            lblPlaceHolderAddSinger.setText("");
            songSinger = txtAddSinger.getText();
            setTextLblAddDemoSong();
        } else {
            lblPlaceHolderAddSinger.setText("Ca sĩ");
            songSinger = "";
            setTextLblAddDemoSong();
        }
    }//GEN-LAST:event_txtAddSingerCaretUpdate

    private void txtAddWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddWriterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddWriterActionPerformed

    private void txtAddWriterCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtAddWriterCaretUpdate
        // TODO add your handling code here:
        if (!txtAddWriter.getText().equals("")) {
            lblPlaceHolderAddWriter.setText("");
        } else {
            lblPlaceHolderAddWriter.setText("Nhạc sĩ");
        }
    }//GEN-LAST:event_txtAddWriterCaretUpdate

    private void txtAddSongNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddSongNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddSongNameActionPerformed

    private void txtAddSongNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtAddSongNameCaretUpdate
        // TODO add your handling code here:
        if (!txtAddSongName.getText().equals("")) {
            lblPlaceHolderAddSongName.setText("");
            songName = txtAddSongName.getText();
            setTextLblAddDemoSong();
        } else {
            songName = "";
            lblPlaceHolderAddSongName.setText("Tên bài hát");
            setTextLblAddDemoSong();
        }
    }//GEN-LAST:event_txtAddSongNameCaretUpdate

    private void btnAddLyricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLyricsActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/lyrics");

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("text file", "txt", "doc", "docx");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/lyrics/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                System.out.println(source.toString());
                System.out.println(destAbsolutePath.toString());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                btnAddLyrics.setText(fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAddLyricsActionPerformed

    private void btnAddPicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPicActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/img/song");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("image file", "jpg", "jpeg");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                Song song = new Song();
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/img/song/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                song.setAVT( fileChooser.getSelectedFile().getName());
                btnAddPic.setText(song.getAVT());
                lblAddPicDemo.setIcon(song.toIcon());
                repaint();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAddPicActionPerformed

    private void btnAddMP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMP3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/mp3");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("music file", "mp3");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/mp3/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                System.out.println(source.toString());
                System.out.println(destAbsolutePath.toString());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                btnAddMP3.setText(fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAddMP3ActionPerformed

    private void btnAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSongActionPerformed
        // TODO add your handling code here:
        addSong();
    }//GEN-LAST:event_btnAddSongActionPerformed

    private void btnEditLyricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditLyricsActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/lyrics");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("text file", "txt");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/lyrics/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                System.out.println(source.toString());
                System.out.println(destAbsolutePath.toString());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                btnEditLyrics.setText(fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEditLyricsActionPerformed

    private void btnEditPicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPicActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/img/song");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("image file", "jpg", "png", "jpeg");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {         
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/img/song/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                Song song = new Song();
                song.setAVT((String) fileChooser.getSelectedFile().getName());
                btnEditPic.setText(song.getAVT());
                lblEditPicDemo.setIcon(song.toIcon());
                repaint();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEditPicActionPerformed

    private void btnEditMP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMP3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("src/mp3");

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter extFilter = new FileNameExtensionFilter("music file", "mp3");
        fileChooser.addChoosableFileFilter(extFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File source = new File(fileChooser.getSelectedFile().getAbsolutePath());
                String fileName = (String) fileChooser.getSelectedFile().getName();
                File dest = new File("../Swave/src/mp3/" + fileName);
                File destAbsolutePath = new File(dest.getCanonicalPath());
                System.out.println(source.toString());
                System.out.println(destAbsolutePath.toString());
                XFile.copyFileUsingStream(source, destAbsolutePath);
                btnEditMP3.setText(fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEditMP3ActionPerformed

    private void btnEditSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSongActionPerformed
        // TODO add your handling code here:
        updateSong();
    }//GEN-LAST:event_btnEditSongActionPerformed

    private void init() {
        this.setOpaque(false);
        setBackground(new Color(0, 0, 0, 1));

        pnlAddSongMenu.setOpaque(false);
        pnlAddSongMenu.setBackground(new Color(0, 0, 0, 1));

        lrpnlAddSong.setOpaque(false);
        lrpnlAddSong.setBackground(new Color(0, 0, 0, 1));
        // Design panel sub add song
        addSongInit();

        // Design panel sub edit song
        editSongInit();

        // Design panel sub list song
        listSongInit();

        pnlAddSongMenu.setOpaque(false);
        pnlAddSongMenu.setBackground(new Color(0, 0, 0, 1));

        lblAddSongMenuItem.setFont(new Font("Roboto", Font.PLAIN, 18));
        lblEditSongMenuItem.setFont(new Font("Roboto", Font.PLAIN, 18));
        lblListSongMenuItem.setFont(new Font("Roboto", Font.PLAIN, 18));

        lblAddSongMenuItem.setText("Thêm");
        lblEditSongMenuItem.setText("Sửa");
        lblListSongMenuItem.setText("Danh sách");

        lblAddSongMenuItem.setForeground(new Color(165, 43, 168));
        lblEditSongMenuItem.setForeground(new Color(198, 198, 198));
        lblListSongMenuItem.setForeground(new Color(198, 198, 198));

        lrpnlAddSong.setPosition(pnlSubAddSong, 0);
        lrpnlAddSong.setPosition(pnlSubEditSong, 1);
        lrpnlAddSong.setPosition(pnlSubListSong, 1);
        pnlSubAddSong.setVisible(true);
        pnlSubEditSong.setVisible(false);
        pnlSubListSong.setVisible(false);

        lblAddSongMenuItem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                lblAddSongMenuItem.setForeground(new Color(165, 43, 168));
                lblEditSongMenuItem.setForeground(new Color(198, 198, 198));
                lblListSongMenuItem.setForeground(new Color(198, 198, 198));
                lrpnlAddSong.getComponent(0).setVisible(false);
                lrpnlAddSong.setPosition(lrpnlAddSong.getComponent(0), 1);
                lrpnlAddSong.setPosition(pnlSubAddSong, 0);
                clearForm(1);
                pnlSubAddSong.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        });

        lblEditSongMenuItem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                lblEditSongMenuItem.setForeground(new Color(165, 43, 168));
                lblAddSongMenuItem.setForeground(new Color(198, 198, 198));
                lblListSongMenuItem.setForeground(new Color(198, 198, 198));
                lrpnlAddSong.getComponent(0).setVisible(false);
                lrpnlAddSong.setPosition(lrpnlAddSong.getComponent(0), 1);
                lrpnlAddSong.setPosition(pnlSubEditSong, 0);
                clearForm(2);
                pnlSubEditSong.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        });

        lblListSongMenuItem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                lblListSongMenuItem.setForeground(new Color(165, 43, 168));
                lblEditSongMenuItem.setForeground(new Color(198, 198, 198));
                lblAddSongMenuItem.setForeground(new Color(198, 198, 198));
                lrpnlAddSong.getComponent(0).setVisible(false);
                lrpnlAddSong.setPosition(lrpnlAddSong.getComponent(0), 1);
                lrpnlAddSong.setPosition(pnlSubListSong, 0);
                pnlSubListSong.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        });
        
        
    }

    private void addSongInit() {
        // Design panel sub add song
        pnlSubAddSong.setOpaque(false);
        pnlSubAddSong.setBackground(new Color(0, 0, 0, 1));

        pnlAddSongContent.setOpaque(false);
        pnlAddSongContent.setBackground(new Color(0, 0, 0, 1));

        pnlAddSongDetail.setOpaque(false);
        pnlAddSongDetail.setBackground(new Color(0, 0, 0, 1));

        pnlAddInfo.setOpaque(false);
        pnlAddInfo.setBackground(new Color(0, 0, 0, 1));

        lblTitleAddSong.setFont(new Font("Inter", Font.BOLD, 32));
        lblTitleAddSong.setForeground(Color.white);

        lblAddDemoSong.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddDemoSong.setForeground(Color.white);

        lblAddGenre.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddGenre.setForeground(Color.white);

        lblAddLyrics.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddLyrics.setForeground(Color.white);

        lblAddMP3.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddMP3.setForeground(Color.white);

        lblAddNameSong.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddNameSong.setForeground(Color.white);

        lblAddPic.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddPic.setForeground(Color.white);

        lblAddSinger.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddSinger.setForeground(Color.white);

        lblAddWriter.setFont(new Font("Inter", Font.PLAIN, 16));
        lblAddWriter.setForeground(Color.white);

        lrpnlAddSong.setPosition(pnlSubAddSong, 0);

        lblBorder1.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder2.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder3.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder4.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));

        txtAddGenre.setBackground(new Color(0, 0, 0, 1));
        txtAddGenre.setFont(new Font("Inter", Font.PLAIN, 16));
        txtAddGenre.setForeground(Color.white);

        txtAddSinger.setBackground(new Color(0, 0, 0, 1));
        txtAddSinger.setFont(new Font("Inter", Font.PLAIN, 16));
        txtAddSinger.setForeground(Color.white);

        txtAddSongName.setBackground(new Color(0, 0, 0, 1));
        txtAddSongName.setFont(new Font("Inter", Font.PLAIN, 16));
        txtAddSongName.setForeground(Color.white);

        txtAddWriter.setBackground(new Color(0, 0, 0, 1));
        txtAddWriter.setFont(new Font("Inter", Font.PLAIN, 16));
        txtAddWriter.setForeground(Color.white);

        lblPlaceHolderAddGerne.setForeground(Color.white);
        lblPlaceHolderAddGerne.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderAddSinger.setForeground(Color.white);
        lblPlaceHolderAddSinger.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderAddSongName.setForeground(Color.white);
        lblPlaceHolderAddSongName.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderAddWriter.setForeground(Color.white);
        lblPlaceHolderAddWriter.setFont(new Font("Inter", Font.PLAIN, 16));

        pnlAddWriter.setBackground(new Color(0, 0, 0, 255));
        pnlAddSongName.setBackground(new Color(0, 0, 0, 255));
        pnlAddSinger.setBackground(new Color(0, 0, 0, 255));
        pnlAddGenre.setBackground(new Color(0, 0, 0, 255));
    }

    private void editSongInit() {
        // Design panel sub edit song
        lblTitleEditSong.setFont(new Font("Inter", Font.BOLD, 32));
        lblTitleEditSong.setForeground(Color.white);

        pnlSubEditSong.setOpaque(false);
        pnlSubEditSong.setBackground(new Color(0, 0, 0, 1));

        pnlEditSongContent.setOpaque(false);
        pnlEditSongContent.setBackground(new Color(0, 0, 0, 1));

        pnlEditSongDetail.setOpaque(false);
        pnlEditSongDetail.setBackground(new Color(0, 0, 0, 1));

        pnlEditInfo.setOpaque(false);
        pnlEditInfo.setBackground(new Color(0, 0, 0, 1));

        lblEditDemoSong.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditDemoSong.setForeground(Color.white);

        lblEditGenre.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditGenre.setForeground(Color.white);

        lblEditLyrics.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditLyrics.setForeground(Color.white);

        lblEditMP3.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditMP3.setForeground(Color.white);

        lblEditNameSong.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditNameSong.setForeground(Color.white);

        lblEditPic.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditPic.setForeground(Color.white);

        lblEditSinger.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditSinger.setForeground(Color.white);

        lblEditWriter.setFont(new Font("Inter", Font.PLAIN, 16));
        lblEditWriter.setForeground(Color.white);

        lrpnlAddSong.setPosition(pnlSubAddSong, 1);

        lblBorder5.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder6.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder7.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));
        lblBorder8.setIcon(new ImageIcon(getClass().getResource("/icons/components/txtAddSong.png")));

        txtEditGenre.setBackground(new Color(0, 0, 0, 1));
        txtEditGenre.setFont(new Font("Inter", Font.PLAIN, 16));
        txtEditGenre.setForeground(Color.white);

        txtEditSinger.setBackground(new Color(0, 0, 0, 1));
        txtEditSinger.setFont(new Font("Inter", Font.PLAIN, 16));
        txtEditSinger.setForeground(Color.white);

        txtEditSongName.setBackground(new Color(0, 0, 0, 1));
        txtEditSongName.setFont(new Font("Inter", Font.PLAIN, 16));
        txtEditSongName.setForeground(Color.white);

        txtEditWriter.setBackground(new Color(0, 0, 0, 1));
        txtEditWriter.setFont(new Font("Inter", Font.PLAIN, 16));
        txtEditWriter.setForeground(Color.white);

        lblPlaceHolderEditGerne.setForeground(Color.white);
        lblPlaceHolderEditGerne.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderEditSinger.setForeground(Color.white);
        lblPlaceHolderEditSinger.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderEditSongName.setForeground(Color.white);
        lblPlaceHolderEditSongName.setFont(new Font("Inter", Font.PLAIN, 16));

        lblPlaceHolderEditWriter.setForeground(Color.white);
        lblPlaceHolderEditWriter.setFont(new Font("Inter", Font.PLAIN, 16));

        pnlEditWriter.setBackground(new Color(0, 0, 0, 255));
        pnlEditSongName.setBackground(new Color(0, 0, 0, 255));
        pnlEditSinger.setBackground(new Color(0, 0, 0, 255));
        pnlEditGenre.setBackground(new Color(0, 0, 0, 255));
    }

    private void listSongInit() {
        // Design panel sub list song
        pnlSubListSong.setOpaque(false);
        pnlSubListSong.setBackground(new Color(0, 0, 0, 255));

        lblTitleListSong.setFont(new Font("Inter", Font.BOLD, 32));
        lblTitleListSong.setForeground(Color.white);

        scrPane.setOpaque(false);
        scrPane.setBackground(new Color(0, 0, 0, 255));

        pnlListSongContent.setOpaque(false);
        pnlListSongContent.setBackground(new Color(0, 0, 0, 255));

        pnlListSongInfo.setOpaque(false);
        pnlListSongInfo.setBackground(new Color(0, 0, 0, 255));

        lblPosition.setFont(new Font("Inter", Font.BOLD, 22));
        lblPosition.setForeground(Color.white);

        lblSinger.setFont(new Font("Inter", Font.BOLD, 22));
        lblSinger.setForeground(Color.white);

        lblWriter.setFont(new Font("Inter", Font.BOLD, 22));
        lblWriter.setForeground(Color.white);

        lblEdit.setFont(new Font("Inter", Font.BOLD, 22));
        lblEdit.setForeground(Color.white);

        lblSongName.setFont(new Font("Inter", Font.BOLD, 22));
        lblSongName.setForeground(Color.white);
    }

    public void fillPnlListSongDetails(Song song) {
        // Fill pnlListSongDetails

        int position = pnlListSongDetails.getComponentCount();

        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = position;
        addSongToPnlListSongDetails(song, gridBagConstraints);

        // 4 dòng dưới để khiến cho panel có height của các components nằm bên trong
        pnlListSongDetails.setPreferredSize(null);
        pnlListSongDetails.setMaximumSize(new Dimension(pnlListSongDetails.getMaximumSize().width, pnlListSongDetails.getPreferredSize().height));
        pnlListSongDetails.validate();
        pnlListSongDetails.repaint();

        pnlListSongDetails.setOpaque(true);
        pnlListSongDetails.setBackground(new Color(0, 0, 0, 255));

        // set height của scroll pane 
        scrPane.setPreferredSize(new Dimension(pnlListSongDetails.getMaximumSize().width, 320));
        scrPane.setVerticalScrollBar(new ScrollBarCustom());

        scrPane.setOpaque(false);
        scrPane.setBackground(new Color(0, 0, 0, 255));
    }

    public void addSongToPnlListSongDetails(Song song, GridBagConstraints gridBagConstraints) {
        ListSongItemAddSongPanel listSongItemAddSongPanel = new ListSongItemAddSongPanel(song);
        listSongItemAddSongPanel.getLblEdit().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                lblEditSongMenuItem.setForeground(new Color(165, 43, 168));
                lblAddSongMenuItem.setForeground(new Color(198, 198, 198));
                lblListSongMenuItem.setForeground(new Color(198, 198, 198));
                lrpnlAddSong.getComponent(0).setVisible(false);
                lrpnlAddSong.setPosition(lrpnlAddSong.getComponent(0), 1);
                lrpnlAddSong.setPosition(pnlSubEditSong, 0);
                pnlSubEditSong.setVisible(true);
                editSong = song;
                setEditForm(song);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
                listSongItemAddSongPanel.getLblEdit().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                listSongItemAddSongPanel.getLblEdit().setForeground(Color.white);
            }

        });

        listSongItemAddSongPanel.getLblDelete().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                deleteSong(song);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
                listSongItemAddSongPanel.getLblDelete().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                listSongItemAddSongPanel.getLblDelete().setForeground(Color.white);
            }

        });
        pnlListSongDetails.add(listSongItemAddSongPanel, gridBagConstraints);
    }

    public void clearForm(int check) {
        Song newSong;
        try {
            newSong = new Song();
            switch (check) {
                case 1:
                    setAddForm(newSong);
                    break;
                case 2:
                    setEditForm(newSong);
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void setAddForm(Song song) {
        txtAddSongName.setText(song.getNameSong());
        songName = song.getNameSong();
        txtAddGenre.setText(song.getCategory());
        txtAddSinger.setText(song.getSinger());
        songSinger = song.getSinger();
        txtAddWriter.setText(song.getMusician());
        if (song.getFileSong().isEmpty()) {
            btnAddMP3.setText("Chưa có file được chọn");
        } else {
            btnAddMP3.setText(song.getFileSong());
        }
        if (song.getFileLyrics().isEmpty()) {
            btnAddLyrics.setText("Chưa có file được chọn");
        } else {
            btnAddLyrics.setText(song.getFileLyrics());
        }
        if (song.getAVT().isEmpty()) {
            btnAddPic.setText("Chưa có file được chọn");
        } else {
            btnAddPic.setText(song.getAVT());
        }
        lblAddPicDemo.setIcon(song.toIcon());
        setTextLblAddDemoSong();
    }

    public void setEditForm(Song song) {
        txtEditSongName.setText(song.getNameSong());
        songName = song.getNameSong();
        txtEditGenre.setText(song.getCategory());
        txtEditSinger.setText(song.getSinger());
        songSinger = song.getSinger();
        txtEditWriter.setText(song.getMusician());
        if (song.getFileSong().isEmpty()) {
            btnEditMP3.setText("Chưa có file được chọn");
        } else {
            btnEditMP3.setText(song.getFileSong());
        }
        if (song.getFileLyrics().isEmpty()) {
            btnEditLyrics.setText("Chưa có file được chọn");
        } else {
            btnEditLyrics.setText(song.getFileLyrics());
        }
        if (song.getAVT().isEmpty()) {
            btnEditPic.setText("Chưa có file được chọn");
        } else {
            btnEditPic.setText(song.getAVT());
        }
        lblEditPicDemo.setIcon(song.toIcon());
        setTextLblEditDemoSong();
    }

    public void setTextLblEditDemoSong() {
        if (songName.isBlank() && songSinger.isBlank()) {
            lblEditDemoSong.setText(songName);
        } else if (songName.isBlank() && !songSinger.isBlank()) {
            lblEditDemoSong.setText(songSinger);
        } else if (!songName.isBlank() && songSinger.isBlank()) {
            lblEditDemoSong.setText(songName);
        } else if (!songName.isBlank() && !songSinger.isBlank()) {
            lblEditDemoSong.setText(songName + " - " + songSinger);
        }
    }

    public void setTextLblAddDemoSong() {
        if (songName.isBlank() && songSinger.isBlank()) {
            lblAddDemoSong.setText(songName);
        } else if (songName.isBlank() && !songSinger.isBlank()) {
            lblAddDemoSong.setText(songSinger);
        } else if (!songName.isBlank() && songSinger.isBlank()) {
            lblAddDemoSong.setText(songName);
        } else if (!songName.isBlank() && !songSinger.isBlank()) {
            lblAddDemoSong.setText(songName + " - " + songSinger);
        }
    }

    public Song getAddForm() {
        Song newSong;
        try {
            newSong = new Song();
            newSong.setNameSong(txtAddSongName.getText());
            newSong.setCategory(txtAddGenre.getText());
            newSong.setSinger(txtAddSinger.getText());
            newSong.setMusician(txtAddWriter.getText());
            newSong.setFileSong(btnAddMP3.getText());
            newSong.setFileLyrics(btnAddLyrics.getText());
            newSong.setAVT(btnAddPic.getText());
            newSong.setStatus(!Login.acc.isRole());
            newSong.setUserID(Login.user.getUserID());
            System.out.println(newSong.toString());
            return newSong;
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddSongPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public Song getEditForm() {
        Song newSong = editSong;
        newSong.setNameSong(txtEditSongName.getText());
        newSong.setCategory(txtEditGenre.getText());
        newSong.setSinger(txtEditSinger.getText());
        newSong.setMusician(txtEditWriter.getText());
        newSong.setFileSong(btnEditMP3.getText());
        newSong.setFileLyrics(btnEditLyrics.getText());
        newSong.setAVT(btnEditPic.getText());
        return newSong;

    }

    public void addSong() {
        Song song = getAddForm();
        if (isValidated(1)) {
            try {
                sdao.insert(song);
                this.fillTable();
                this.clearForm(1);
                MsgBox.alert(this, "Thêm mới thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Thêm mới thất bại!");
                e.printStackTrace();
            }
        }
    }

    public void updateSong() {
        Song song = getEditForm();
        if (isValidated(2)) {
            try {
                sdao.update(song);
                this.fillTable();
                this.clearForm(2);
                MsgBox.alert(this, "Cập nhật thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Cập nhật thất bại!");
                e.printStackTrace();
            }
        }
    }

    public void deleteSong(Song song) {
        if (MsgBox.confirm(this, "Bạn thực sự muốn xóa bài hát này? Có rất là nhiều người đang thưởng thức bài hát của bạn")) {
            try {
                sdao.delete(song.getSongID());
                this.fillTable();
                MsgBox.alert(this, "Xóa thành công!");
            } catch (HeadlessException e) {
                MsgBox.alert(this, "Xóa thất bại!");
                e.printStackTrace();
            }
        }
    }

    public void fillTable() {
        pnlListSongDetails.removeAll();
        try {
            songList = (ArrayList<Song>) sdao.selectAllSongByUserID(Login.user.getUserID());
            for (Song song : songList) {
                song.toString();
                fillPnlListSongDetails(song);
            }
            repaint();
            revalidate();
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }

    }

    private boolean isValidated(int action) {

        switch (action) {
            case 1:
                if (btnAddMP3.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file nhạc!");
                    return false;
                }
                if (btnAddLyrics.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file lời bài hát!");
                    return false;
                }
                if (btnAddPic.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file hình!");
                    return false;
                }
                if (txtAddSinger.getText().isBlank()) {
                    MsgBox.alert(this, "Ca sĩ không được để trống");
                    return false;
                }
                if (txtAddSongName.getText().isBlank()) {
                    MsgBox.alert(this, "Tên bài hát không được để trống");
                    return false;
                }
                if (txtAddWriter.getText().isBlank()) {
                    MsgBox.alert(this, "Nhạc sĩ không được để trống");
                    return false;
                }
                if (txtAddGenre.getText().isBlank()) {
                    MsgBox.alert(this, "Thể loại bài hát không được để trống");
                    return false;
                }
                return true;
            case 2:
                if (btnEditMP3.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file nhạc!");
                    return false;
                }
                if (btnEditLyrics.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file lời bài hát!");
                    return false;
                }
                if (btnEditPic.getText().equalsIgnoreCase("Chưa có file được chọn")) {
                    MsgBox.alert(this, "Bạn chưa thêm file hình!");
                    return false;
                }
                if (txtEditSinger.getText().isBlank()) {
                    MsgBox.alert(this, "Ca sĩ không được để trống");
                    return false;
                }
                if (txtEditSongName.getText().isBlank()) {
                    MsgBox.alert(this, "Tên bài hát không được để trống");
                    return false;
                }
                if (txtEditWriter.getText().isBlank()) {
                    MsgBox.alert(this, "Nhạc sĩ không được để trống");
                    return false;
                }
                if (txtEditGenre.getText().isBlank()) {
                    MsgBox.alert(this, "Thể loại bài hát không được để trống");
                    return false;
                }
                return true;
            default:
                throw new AssertionError();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.utilcomponent.Button btnAddLyrics;
    private swing.utilcomponent.Button btnAddMP3;
    private swing.utilcomponent.Button btnAddPic;
    private swing.utilcomponent.Button btnAddSong;
    private swing.utilcomponent.Button btnEditLyrics;
    private swing.utilcomponent.Button btnEditMP3;
    private swing.utilcomponent.Button btnEditPic;
    private swing.utilcomponent.Button btnEditSong;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblAddDemoSong;
    private javax.swing.JLabel lblAddGenre;
    private javax.swing.JLabel lblAddLyrics;
    private javax.swing.JLabel lblAddMP3;
    private javax.swing.JLabel lblAddNameSong;
    private javax.swing.JLabel lblAddPic;
    private model.borderImage lblAddPicDemo;
    private javax.swing.JLabel lblAddSinger;
    private javax.swing.JLabel lblAddSongMenuItem;
    private javax.swing.JLabel lblAddWriter;
    private javax.swing.JLabel lblBorder1;
    private javax.swing.JLabel lblBorder2;
    private javax.swing.JLabel lblBorder3;
    private javax.swing.JLabel lblBorder4;
    private javax.swing.JLabel lblBorder5;
    private javax.swing.JLabel lblBorder6;
    private javax.swing.JLabel lblBorder7;
    private javax.swing.JLabel lblBorder8;
    private javax.swing.JLabel lblEdit;
    private javax.swing.JLabel lblEditDemoSong;
    private javax.swing.JLabel lblEditGenre;
    private javax.swing.JLabel lblEditLyrics;
    private javax.swing.JLabel lblEditMP3;
    private javax.swing.JLabel lblEditNameSong;
    private javax.swing.JLabel lblEditPic;
    private model.borderImage lblEditPicDemo;
    private javax.swing.JLabel lblEditSinger;
    private javax.swing.JLabel lblEditSongMenuItem;
    private javax.swing.JLabel lblEditWriter;
    private javax.swing.JLabel lblListSongMenuItem;
    private javax.swing.JLabel lblPlaceHolderAddGerne;
    private javax.swing.JLabel lblPlaceHolderAddSinger;
    private javax.swing.JLabel lblPlaceHolderAddSongName;
    private javax.swing.JLabel lblPlaceHolderAddWriter;
    private javax.swing.JLabel lblPlaceHolderEditGerne;
    private javax.swing.JLabel lblPlaceHolderEditSinger;
    private javax.swing.JLabel lblPlaceHolderEditSongName;
    private javax.swing.JLabel lblPlaceHolderEditWriter;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblSinger;
    private javax.swing.JLabel lblSongName;
    private javax.swing.JLabel lblTitleAddSong;
    private javax.swing.JLabel lblTitleEditSong;
    private javax.swing.JLabel lblTitleListSong;
    private javax.swing.JLabel lblWriter;
    private javax.swing.JLayeredPane lrpnlAddSong;
    private javax.swing.JPanel pnlAddGenre;
    private javax.swing.JPanel pnlAddInfo;
    private javax.swing.JPanel pnlAddSinger;
    private javax.swing.JPanel pnlAddSongContent;
    private javax.swing.JPanel pnlAddSongDetail;
    private javax.swing.JPanel pnlAddSongMenu;
    private javax.swing.JPanel pnlAddSongName;
    private javax.swing.JPanel pnlAddWriter;
    private javax.swing.JPanel pnlEditGenre;
    private javax.swing.JPanel pnlEditInfo;
    private javax.swing.JPanel pnlEditSinger;
    private javax.swing.JPanel pnlEditSongContent;
    private javax.swing.JPanel pnlEditSongDetail;
    private javax.swing.JPanel pnlEditSongName;
    private javax.swing.JPanel pnlEditWriter;
    private javax.swing.JPanel pnlListSongContent;
    private javax.swing.JPanel pnlListSongDetails;
    private javax.swing.JPanel pnlListSongInfo;
    private javax.swing.JPanel pnlSubAddSong;
    private javax.swing.JPanel pnlSubEditSong;
    private javax.swing.JPanel pnlSubListSong;
    private javax.swing.JScrollPane scrPane;
    private javax.swing.JTextField txtAddGenre;
    private javax.swing.JTextField txtAddSinger;
    private javax.swing.JTextField txtAddSongName;
    private javax.swing.JTextField txtAddWriter;
    private javax.swing.JTextField txtEditGenre;
    private javax.swing.JTextField txtEditSinger;
    private javax.swing.JTextField txtEditSongName;
    private javax.swing.JTextField txtEditWriter;
    // End of variables declaration//GEN-END:variables

}
