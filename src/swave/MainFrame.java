package swave;

import Tien.ui.ChangePassword;
import Tien.ui.CreatPlaylist;
import Vu.ui.AdminToolDialog;
import component.EventItem;
import dao.LoveSongDAO;
import dao.PlaylistDAO;
import dao.SongDAO;
import dao.SongOfPlaylistDAO;
import dao.StatisticDAO;
import entity.LoveSong;
import entity.PlayList;
import entity.Search;
import entity.Song;
import entity.SongOfPlaylist;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import net.miginfocom.layout.ComponentWrapper;
import net.miginfocom.layout.LayoutCallback;
import panelMain.AddSongPanel;
import panelMain.MainPanel;
import panelMain.PlaylistPane;
import panelMain.SearchPane;
import panelMain.SongLovelistPane;
import swing.CommentPane;
import swing.PanelSearchSuggestion;
import swing.SongItem;
import swing.SongOfPlaylistPane;
import swing.glasspanepopup.DefaultLayoutCallBack;
import swing.glasspanepopup.DefaultOption;
import swing.glasspanepopup.GlassPanePopup;
import swing.javaswingdev.SimpleTitleBar;
import swing.lyricsPane;
import swing.swavecomponent.MenuBar;
import swing.swavecomponent.ToolBar;
import swing.swavecomponent.UserTool;
import swing.toolPlay;

/**
 *
 * @author Phan Qui Duc
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private CardLayout c;
    private ArrayList<Song> songLoveList = new ArrayList<>();
    private ArrayList<Song> songList = new ArrayList<>();
    private ArrayList<Song> songOfPlaylists = new ArrayList<>();
    private ArrayList<PlayList> playlist = new ArrayList<>();
    private ArrayList<SongOfPlaylist> songOfPlaylistsID = new ArrayList<>();
    private List<Object[]> listTrending = new ArrayList<>();
    private List<Song> listSongTrending = new ArrayList<>();
    private String appItemName;
    public Login loginForm;
    public MainFrame main;
    private JPopupMenu menu;
    private PanelSearchSuggestion search;
    public SongItem itemSong;
    private SongDAO songDAO = new SongDAO();
    private SongOfPlaylistDAO songOfPlaylistDAO = new SongOfPlaylistDAO();
    private StatisticDAO sdao = new StatisticDAO();
    private LoveSongDAO lsDao = new LoveSongDAO();

    private UserTool userTool = new UserTool(this);

    public MainFrame() throws UnsupportedAudioFileException, IOException, URISyntaxException {
        initComponents();
        c = (CardLayout) pnlChange.getLayout();
        this.main = this;
        pnlAddSong.mainFrame = this;
        pnlMainScreen.main = this;
        pnlMyPlaylist.main = this;
        pnlSongOfPlaylistPane.main = this;
        toolPlay1.main = this;
        pnlComment.main = this;
        pnlLyrics.setVisible(false);
        pnlComment.setVisible(false);
        toolPlay1.fillData(new Song(1, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "/mp3/Nang-Am-Xa-Dan-Son-Tung-M-TP.mp3", true, 1));
        initSearchSuggestion();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlComment = new swing.CommentPane();
        jPanel1 = new javax.swing.JPanel();
        toolPlay1 = new swing.toolPlay();
        titleBar = new swing.javaswingdev.SimpleTitleBar();
        menuBar = new swing.swavecomponent.MenuBar();
        pnlChange = new javax.swing.JPanel();
        pnlLyrics = new swing.lyricsPane();
        pnlMainScreen = new panelMain.MainPanel();
        pnlCreatePlaylist = new javax.swing.JPanel();
        lblCreatePlaylist = new javax.swing.JLabel();
        pnlMyPlaylist = new panelMain.PlaylistPane();
        pnlLikeSong = new panelMain.SongLovelistPane();
        pnlSearch = new panelMain.SearchPane();
        pnlAddSong = new panelMain.AddSongPanel();
        pnlSongOfPlaylistPane = new swing.SongOfPlaylistPane();
        toolBar = new swing.swavecomponent.ToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1532, 810));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlComment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlCommentMouseClicked(evt);
            }
        });
        getContentPane().add(pnlComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1532, 150));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(toolPlay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(toolPlay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 663, 1532, 150));
        getContentPane().add(titleBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1532, 29));
        getContentPane().add(menuBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 29, -1, 660));

        pnlChange.setOpaque(false);
        pnlChange.setPreferredSize(new java.awt.Dimension(1283, 590));
        pnlChange.setLayout(new java.awt.CardLayout());
        pnlChange.add(pnlLyrics, "cardLyrics");
        pnlChange.add(pnlMainScreen, "cardMain");

        lblCreatePlaylist.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCreatePlaylist.setText("Tạo playlist");
        pnlCreatePlaylist.add(lblCreatePlaylist);

        pnlChange.add(pnlCreatePlaylist, "card4");
        pnlChange.add(pnlMyPlaylist, "cardPlaylist");
        pnlChange.add(pnlLikeSong, "cardLove");
        pnlChange.add(pnlSearch, "cardSearch");
        pnlChange.add(pnlAddSong, "cardAddSong");
        pnlChange.add(pnlSongOfPlaylistPane, "cardSongOfPlaylist");

        getContentPane().add(pnlChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 108, -1, 555));
        getContentPane().add(toolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 29, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pnlCommentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlCommentMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlCommentMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void init() throws UnsupportedAudioFileException, IOException, URISyntaxException {
        this.getContentPane().setBackground(new Color(0, 0, 0, 255));
        titleBar.init(this);
        setResizable(false);
        GlassPanePopup.install(this);
        eventUserTool();
        toolBar.getUserPanel().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                GlassPanePopup.showPopup(userTool, new DefaultOption() {
                    @Override
                    public float opacity() {
                        return 0;
                    }

                    @Override
                    public LayoutCallback getLayoutCallBack(Component parent) {
                        return new DefaultLayoutCallBack(parent.getParent()) {
                            @Override
                            public void correctBounds(ComponentWrapper cw) {
                                if (parent.isVisible()) {
                                    cw.setBounds(this.getParent().getWidth() - toolBar.getUserPanel().getWidth(), this.getParent().getHeight() - 555 - 150, cw.getWidth(), cw.getHeight());
                                } else {
                                    super.correctBounds(cw);
                                }
                            }

                        };
                    }
                });
            }

        });
        c.show(pnlChange, "cardMain");
        menuBar.getPnlHome().setBackground(new Color(76, 76, 76));
        appItemName = menuBar.getPnlHome().getName();
        menuBar.getPnlMenu().repaint();
        menuBar.getPnlMenu().revalidate();

        //-----------------------------------
        //add my playlist:
        playlist.add(new PlayList(1, "LOFI 2021", 2023, true, "playlist1.jpg"));
        playlist.add(new PlayList(2, "HOT TREND 2023", 2023, true, "playlist2.jpg"));
        playlist.add(new PlayList(3, "NHẠC TIKTOK HAY", 2023, true, "playlist3.jpg"));
        playlist.add(new PlayList(4, "SAD SONGS", 2023, true, "playlist4.jpg"));
        playlist.add(new PlayList(5, "CHILL SONGS", 2023, true, "playlist1.jpg"));
        playlist.add(new PlayList(6, "NHẠC REMIX", 2023, true, "playlist6.jpg"));
        playlist.add(new PlayList(7, "SONG BTS", 2023, true, "playlist10.jpg"));
        playlist.add(new PlayList(8, "RAP SONGS", 2023, true, "playlist2.jpg"));
        playlist.add(new PlayList(9, "NHẠC CHILL 2023", 2023, true, "playlist4.jpg"));
        playlist.add(new PlayList(10, "CHILL LOFI 2023 ", 2023, true, "playlist10.jpg"));
        playlist.add(new PlayList(11, "TREND TIKTOK 2023 ", 2023, true, "playlist2.jpg"));
        playlist.add(new PlayList(12, "BÀI HÁY HAY ", 2023, true, "playlist12.jpg"));
        playlist.add(new PlayList(13, "CHILL STUDENTS ", 2023, true, "playlist13.jpg"));
        playlist.add(new PlayList(14, "SLEEP SONGS", 2023, true, "playlist14.jpg"));
        playlist.add(new PlayList(15, "CHILL SLEEP 2023", 2023, true, "playlist15.jpg"));
        playlist.add(new PlayList(16, "HOT SONGS", 2023, true, "playlist16.jpg"));
        playlist.add(new PlayList(17, "TIKTOK 2023", 2023, true, "playlist12.jpg"));
        playlist.add(new PlayList(18, "NHẠC TÂM TRẠNG", 2023, true, "playlist3.jpg"));
        playlist.add(new PlayList(19, "LOVE SONGS", 2023, true, "playlist19.jpg"));
        playlist.add(new PlayList(20, "NHẠC TRẺ REMIX", 2023, true, "playlist2.jpg"));

        for (PlayList playList : playlist) {
            pnlMyPlaylist.addList(playList);
            pnlMyPlaylist.addListLove(playList);
        }

        //------------------------------------
        //------------------------------------
        //add list playlist to pnl Menu
        for (PlayList item : playlist) {
            menuBar.addPlaylistList(item);
        }

        //------------------------------------
        //add list song to pnl songList
        //------------------------------------
        //add song to panel main
//        songList.add(new Song(1, "Ăn gì đây", "Taylor Swift", "Hòa Minzy", "Pop", "anGiDay.txt", "anGiDay.jpg", "anGiDay.mp3", true, 1));
//        songList.add(new Song(2, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "chamHet.txt", "Cham-het.jpg", "chamHet.mp3", true, 1));
//        songList.add(new Song(3, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "chayNgayDi.txt", "Chay_ngay_di.png", "chayNgayDi.mp3", true, 1));
//        songList.add(new Song(4, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Con-mua-ngang-qua.jpg", "conMuaNgangQua.mp3", true, 1));
//        songList.add(new Song(5, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Em-cua-ngay-hom-qua.jpg", "emCuaNgayHomQua.mp3", true, 1));
//        songList.add(new Song(6, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Nang_Am_Xa_Dan.jpg", "nangAmXaDan.mp3", true, 1));
//        songList.add(new Song(7, "Ăn gì đây", "Taylor Swift", "Hòa Minzy", "Pop", "anGiDay.txt", "anGiDay.jpg", "anGiDay.mp3", true, 1));
//        songList.add(new Song(8, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Cham-het.jpg", "chamHet.mp3", true, 1));
//        songList.add(new Song(9, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Chay_ngay_di.png", "chayNgayDi.mp3", true, 1));
//        songList.add(new Song(10, "Khi Người Mình Yêu Khóc", "Taylor Swift", "Phan Mạnh Quỳnh", "Pop", "anGiDay.txt", "khiNguoiMinhYeuKhoc.jpg", "khiNguoiMinhYeuKhoc.mp3", true, 1));
//        songList.add(new Song(11, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Em-cua-ngay-hom-qua.jpg", "emCuaNgayHomQua.mp3", true, 1));
//        songList.add(new Song(12, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "anGiDay.txt", "Nang_Am_Xa_Dan.jpg", "nangAmXaDan.mp3", true, 1));
        //ADD SONG LOVE:
        List<LoveSong> lsList = lsDao.selectAllByUID(Login.user.getUserID());
        for (LoveSong loveSong : lsList) {
            Song item = songDAO.selectById(loveSong.getSongID());
            songLoveList.add(item);
        }

        //add Song love for Pane:
        for (Song data : songLoveList) {
            pnlLikeSong.getPnlSonglist().addSong(data, songLoveList);
        }

        pnlLikeSong.getPnlSonglist().setSongLove(songLoveList);

        // Đổ bài hát từ playlist trending lên bài hát
        //------------------------------------
        //add playlist to panel main
        pnlMainScreen.fillTopPlaylist();

        //add trending to panel main
        fillTrendingSong();

        for (PlayList item : playlist) {
            pnlSearch.getPnlSearchAll().addPlaylist(item);
            pnlSearch.getPnlSearchPlaylist().addList(item);
        }

        //add sự kiện cho nút play
        pnlLikeSong.getPnlSonglist().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                itemSong = songItem;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlLikeSong.getPnlSonglist().setRunningSong(com);
                songItem.selectRunning(true);

                toolPlay1.listSong = itemSong.listSong;
                toolPlay1.fillData(song);
                toolPlay1.getLblTimeStart().setText(songItem.getLblTime().getText());
                toolPlay1.songItem = songItem;
                toolPlay1.getSlMusic().setMinimum(0);
                toolPlay1.getSlMusic().setValue(0);
                toolPlay1.getSlMusic().setMaximum(songItem.minutetotalLength * 60 + songItem.secondTotalLength);
                toolPlay1.revalidate();
                System.out.println("fill successfully");
                if (toolPlay1.player != null) {
                    try {
                        toolPlay1.stopSong();
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                toolPlay1.setPause(-1);
                toolPlay1.runningSong();
                toolPlay1.setRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void itemClick(Search data) {
            }
        });

        //add sự kiện cho nút play
        pnlMainScreen.getPnlTrendingSongList().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                itemSong = songItem;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlMainScreen.getPnlTrendingSongList().setRunningSong(com);
                songItem.selectRunning(true);

                toolPlay1.listSong = itemSong.listSong;
                toolPlay1.fillData(song);
                toolPlay1.getLblTimeStart().setText(songItem.getLblTime().getText());
                toolPlay1.songItem = songItem;
                toolPlay1.getSlMusic().setMinimum(0);
                toolPlay1.getSlMusic().setValue(0);
                toolPlay1.getSlMusic().setMaximum(songItem.minutetotalLength * 60 + songItem.secondTotalLength);
                toolPlay1.revalidate();
                System.out.println("fill successfully");
                if (toolPlay1.player != null) {
                    try {
                        toolPlay1.stopSong();
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                toolPlay1.setPause(-1);
                toolPlay1.runningSong();
                toolPlay1.setRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void itemClick(Search data) {
            }
        });

        //add sự kiện cho nút play
        pnlSongOfPlaylistPane.getPnlSonglist().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                itemSong = songItem;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlSongOfPlaylistPane.getPnlSonglist().setRunningSong(com);
                songItem.selectRunning(true);

                toolPlay1.listSong = itemSong.listSong;
                toolPlay1.fillData(song);
                toolPlay1.getLblTimeStart().setText(songItem.getLblTime().getText());
                toolPlay1.songItem = songItem;
                toolPlay1.getSlMusic().setMinimum(0);
                toolPlay1.getSlMusic().setValue(0);
                toolPlay1.getSlMusic().setMaximum(songItem.minutetotalLength * 60 + songItem.secondTotalLength);
                toolPlay1.revalidate();
                System.out.println("fill successfully");
                if (toolPlay1.player != null) {
                    try {
                        toolPlay1.stopSong();
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                toolPlay1.setPause(-1);
                toolPlay1.runningSong();
                toolPlay1.setRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void itemClick(Search data) {
            }
        });

        //add sự kiện cho playlist item tại thanh menu bar
        menuBar.setEventPnlPlaylistItem(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void EnterEvent(Component com, Song song) {
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void itemClick(Search data) {
            }
        });

        // Add sự kiện khi chọn bài hát trong bài hát trending
        pnlMainScreen.setEventItem(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                pnlMainScreen.getCardLayout().show(pnlMainScreen, "cardTrending");
                SongItem songItem = (SongItem) pnlMainScreen.getPnlTrendingSongList().getPnlSongList().getComponent(song.getSongID() - 1);
                itemSong = songItem;

                songItem.getLblStart().setVisible(false);
                songItem.getLblIconPlay().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlMainScreen.getPnlTrendingSongList().setRunningSong(songItem);
                songItem.selectRunning(true);

                toolPlay1.listSong = songItem.listSong;
                toolPlay1.fillData(song);
                toolPlay1.getLblTimeStart().setText(songItem.getLblTime().getText());
                toolPlay1.songItem = songItem;
                toolPlay1.listSong = songItem.listSong;
                toolPlay1.getSlMusic().setMinimum(0);
                toolPlay1.getSlMusic().setValue(0);
                toolPlay1.getSlMusic().setMaximum(songItem.minutetotalLength * 60 + songItem.secondTotalLength);
                toolPlay1.revalidate();
                System.out.println("fill successfully");
                if (toolPlay1.player != null) {
                    try {
                        toolPlay1.stopSong();
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                toolPlay1.setPause(-1);
                toolPlay1.runningSong();
                toolPlay1.setRunning(true);
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void EnterEvent(Component com, Song song) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void itemClick(Search data) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

        // Add sự kiện khi chọn playlist trong playlist top
        // Chưa làm xong
        pnlMainScreen.setEventItemPlaylist(new EventItem() {
            @Override
            public void clickEvent(Component com, PlayList playist) {
                songOfPlaylists.clear();
                songOfPlaylistsID = (ArrayList<SongOfPlaylist>) songOfPlaylistDAO.selectSongOfPlaylists(playist.getPlaylistID());
                for (SongOfPlaylist sop : songOfPlaylistsID) {
                    songOfPlaylists.add(songDAO.selectById(sop.getSongID()));
                }
                System.out.println(songOfPlaylists);
                pnlSongOfPlaylistPane.listSOngOfPlayList = songOfPlaylists;
                pnlSongOfPlaylistPane.setPlaylistFocus(playist);
                try {
                    pnlSongOfPlaylistPane.fillData();
                    pnlSongOfPlaylistPane.getPnlSonglist().getPnlSongList().repaint();
                    System.out.println(pnlSongOfPlaylistPane.getPnlSonglist().getPnlSongList().getComponentCount());

                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void itemClick(Search data) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void clickEvent(Component com, Song song) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void EnterEvent(Component com, Song song) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

        //Hiển thị icon tim theo bài hát yêu thích:
        //------------------------------------
        menuBar.getLblLogo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardMain");
                pnlMainScreen.getCardLayout().show(pnlMainScreen, "cardMain");
                menuBar.getPnlHome().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlHome().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlMyPlaylists().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardPlaylist");
                menuBar.getPnlMyPlaylists().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlMyPlaylists().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlLikedSong().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardLove");
                menuBar.getPnlLikedSong().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlLikedSong().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlAddSong().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardAddSong");
                menuBar.getPnlAddSong().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlAddSong().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        menuBar.getPnlCreatePlaylist().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                CreatPlaylist a = new CreatPlaylist(main, true);
                a.setVisible(true);
                menuBar.getPnlCreatePlaylist().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlCreatePlaylist().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        menuBar.getPnlHome().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardMain");
                pnlMainScreen.getCardLayout().show(pnlMainScreen, "cardMain");
                menuBar.getPnlHome().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlHome().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        toolBar.getFindTextField().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (search.getItemSize() > 0) {
                    menu.show(toolBar.getFindTextField(), 0, toolBar.getFindTextField().getHeight() + 5);
                }
            }
        });

        toolBar.getFindTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = toolBar.getFindTextField().getText().trim().toLowerCase();
                search.setData(search.dataSearch(text));
                if (search.getItemSize() > 0) {
                    menu.show(toolBar.getFindTextField(), 0, toolBar.getFindTextField().getHeight() + 5);
                    menu.setPopupSize(menu.getWidth(), (search.getItemSize() * 45) + 2);
                } else {
                    menu.setVisible(false);
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    c.show(pnlChange, "cardSearch");
                    for (PlayList item : playlist) {
                        pnlSearch.getPnlSearchPlaylist().addPlayList(item);
                    }

                    for (Song item : songList) {
                        try {
                            pnlSearch.getPnlSearchSong().addSong(item);
                        } catch (UnsupportedAudioFileException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (URISyntaxException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        pnlSearch.getPnlSearchAll().addSong(item);
                    }
                    repaint();
                    menu.setVisible(false);
                }
            }
        });

        search.addEventClick(new EventItem() {
            @Override
            public void itemClick(Search data) {
                menu.setVisible(false);
                toolBar.getFindTextField().setText(data.getText());
                c.show(pnlChange, "cardSearch");
                for (PlayList item : playlist) {
                    pnlSearch.getPnlSearchPlaylist().addPlayList(item);
                }

                for (Song item : songList) {
                    try {
                        pnlSearch.getPnlSearchSong().addSong(item);
                    } catch (UnsupportedAudioFileException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    pnlSearch.getPnlSearchAll().addSong(item);
                }
                repaint();
            }

            @Override
            public void clickEvent(Component com, Song song) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void EnterEvent(Component com, Song song) {
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }
        });
    }

    private void undoChosen(String name) {
        if (menuBar.getPnlAddSong().getName().equals(name)) {
            menuBar.getPnlAddSong().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlCreatePlaylist().getName().equals(name)) {
            menuBar.getPnlCreatePlaylist().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlLikedSong().getName().equals(name)) {
            menuBar.getPnlLikedSong().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlMyPlaylists().getName().equals(name)) {
            menuBar.getPnlMyPlaylists().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlHome().getName().equals(name)) {
            menuBar.getPnlHome().setBackground(new Color(0, 0, 0, 1));

        }
    }

    public CardLayout getC() {
        return c;
    }

    public void setC(CardLayout c) {
        this.c = c;
    }

    public ArrayList<Song> getSongLoveList() {
        return songLoveList;
    }

    public void setSongLoveList(ArrayList<Song> songLoveList) {
        this.songLoveList = songLoveList;
    }

    public String getAppItemName() {
        return appItemName;
    }

    public void setAppItemName(String appItemName) {
        this.appItemName = appItemName;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JLabel getLblCreatePlaylist() {
        return lblCreatePlaylist;
    }

    public lyricsPane getPnlLyrics() {
        return pnlLyrics;
    }

    public void setPnlLyrics(lyricsPane pnlLyrics) {
        this.pnlLyrics = pnlLyrics;
    }

    public void setLblCreatePlaylist(JLabel lblCreatePlaylist) {
        this.lblCreatePlaylist = lblCreatePlaylist;
    }

    public void setMenuBar(MenuBar menuBar) {
        this.menuBar = menuBar;
    }

    public AddSongPanel getPnlAddSong() {
        return pnlAddSong;
    }

    public void setPnlAddSong(AddSongPanel pnlAddSong) {
        this.pnlAddSong = pnlAddSong;
    }

    public JPanel getPnlChange() {
        return pnlChange;
    }

    public void setPnlChange(JPanel pnlChange) {
        this.pnlChange = pnlChange;
    }

    public JPanel getPnlCreatePlaylist() {
        return pnlCreatePlaylist;
    }

    public void setPnlCreatePlaylist(JPanel pnlCreatePlaylist) {
        this.pnlCreatePlaylist = pnlCreatePlaylist;
    }

    public SongLovelistPane getPnlLikeSong() {
        return pnlLikeSong;
    }

    public void setPnlLikeSong(SongLovelistPane pnlLikeSong) {
        this.pnlLikeSong = pnlLikeSong;
    }

    public MainPanel getPnlMainScreen() {
        return pnlMainScreen;
    }

    public void setPnlMainScreen(MainPanel pnlMainScreen) {
        this.pnlMainScreen = pnlMainScreen;
    }

    public PlaylistPane getPnlMyPlaylist() {
        return pnlMyPlaylist;
    }

    public void setPnlMyPlaylist(PlaylistPane pnlMyPlaylist) {
        this.pnlMyPlaylist = pnlMyPlaylist;
    }

    public SearchPane getPnlSearch() {
        return pnlSearch;
    }

    public void setPnlSearch(SearchPane pnlSearch) {
        this.pnlSearch = pnlSearch;
    }

    public SongOfPlaylistPane getPnlSongOfPlaylistPane() {
        return pnlSongOfPlaylistPane;
    }

    public void setPnlSongOfPlaylistPane(SongOfPlaylistPane pnlSongOfPlaylistPane) {
        this.pnlSongOfPlaylistPane = pnlSongOfPlaylistPane;
    }

    public SimpleTitleBar getTitleBar() {
        return titleBar;
    }

    public void setTitleBar(SimpleTitleBar titleBar) {
        this.titleBar = titleBar;
    }

    public ToolBar getToolBar() {
        return toolBar;
    }

    public void setToolBar(ToolBar toolBar) {
        this.toolBar = toolBar;
    }

    public toolPlay getToolPlay1() {
        return toolPlay1;
    }

    public void setToolPlay1(toolPlay toolPlay1) {
        this.toolPlay1 = toolPlay1;
    }

    public CommentPane getPnlComment() {
        return pnlComment;
    }

    public void setPnlComment(CommentPane pnlComment) {
        this.pnlComment = pnlComment;
    }

    private void eventUserTool() {
        userTool.getPnlPersonalInfo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                ChangePassword mainIF = new ChangePassword(main, true);
                mainIF.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                userTool.getPnlPersonalInfo().getLblPanelName().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                userTool.getPnlPersonalInfo().getLblPanelName().setForeground(new Color(199, 199, 199));
            }

        });

        userTool.getPnlAdminTool().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                AdminToolDialog atd = new AdminToolDialog(userTool.getMf(), true);
                atd.setVisible(true);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                userTool.getPnlAdminTool().getLblPanelName().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                userTool.getPnlAdminTool().getLblPanelName().setForeground(new Color(199, 199, 199));
            }

        });
        userTool.getPnlIntroduction().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {
                userTool.getPnlIntroduction().getLblPanelName().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                userTool.getPnlIntroduction().getLblPanelName().setForeground(new Color(199, 199, 199));
            }

        });

        userTool.getPnlLogout().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Login loginForm = new Login();
                loginForm.setVisible(true);
                main.setVisible(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                userTool.getPnlLogout().getLblPanelName().setForeground(new Color(165, 43, 168));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                userTool.getPnlLogout().getLblPanelName().setForeground(new Color(199, 199, 199));
            }

        });
    }

    public void initSearchSuggestion() {
        menu = new JPopupMenu();
        search = new PanelSearchSuggestion();
        menu.setBorder(BorderFactory.createLineBorder(new Color(164, 164, 164)));
        menu.add(search);
        menu.setFocusable(false);
        search.addEventClick(new EventItem() {
            @Override
            public void itemClick(Search data) {
                menu.setVisible(false);
                toolBar.getFindTextField().setText(data.getText());

            }

            @Override
            public void clickEvent(Component com, Song song) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void EnterEvent(Component com, Song song) {
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }
        });
    }

    public void fillTrendingSong() throws UnsupportedAudioFileException, IOException, URISyntaxException {
        listTrending.clear();
        listSongTrending.clear();
        listTrending = sdao.getTrending();
        for (Object[] objects : listTrending) {
            Song s = songDAO.selectById((Integer) objects[0]);
            listSongTrending.add(s);
        }
        pnlMainScreen.getPnlDemoTrending().removeAll();

        pnlMainScreen.getPnlTrendingSongList().getPnlSongList().removeAll();
        pnlMainScreen.fillTrendingSong((ArrayList<Song>) listSongTrending);
        //add Song trending
        for (Song data : listSongTrending) {
            pnlMainScreen.getPnlTrendingSongList().addSong(data, listSongTrending);
        }

        // Hiển thị icon tim theo bài hát yêu thích
        //pnlMainScreen.getPnlTrendingSongList().setSongLove(songLoveList);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCreatePlaylist;
    private swing.swavecomponent.MenuBar menuBar;
    private panelMain.AddSongPanel pnlAddSong;
    private javax.swing.JPanel pnlChange;
    private swing.CommentPane pnlComment;
    private javax.swing.JPanel pnlCreatePlaylist;
    private panelMain.SongLovelistPane pnlLikeSong;
    private swing.lyricsPane pnlLyrics;
    private panelMain.MainPanel pnlMainScreen;
    private panelMain.PlaylistPane pnlMyPlaylist;
    private panelMain.SearchPane pnlSearch;
    private swing.SongOfPlaylistPane pnlSongOfPlaylistPane;
    private swing.javaswingdev.SimpleTitleBar titleBar;
    private swing.swavecomponent.ToolBar toolBar;
    private swing.toolPlay toolPlay1;
    // End of variables declaration//GEN-END:variables
}
