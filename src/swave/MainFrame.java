package swave;

import Tien.ui.CreatPlaylist;
import component.EventItem;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import entity.PlayList;
import entity.Song;
import javax.swing.JLabel;
import javax.swing.JPanel;
import net.miginfocom.layout.ComponentWrapper;
import net.miginfocom.layout.LayoutCallback;
import panelMain.AddSongPanel;
import panelMain.MainPanel;
import panelMain.PlaylistPane;
import panelMain.SearchPane;
import panelMain.SongLovelistPane;
import swing.CommentPane;
import swing.SongItem;
import swing.SongOfPlaylistPane;
import swing.glasspanepopup.DefaultLayoutCallBack;
import swing.glasspanepopup.DefaultOption;
import swing.glasspanepopup.GlassPanePopup;
import swing.javaswingdev.SimpleTitleBar;
import swing.lyricsPane;
import swing.swavecomponent.MenuBar;
import swing.swavecomponent.ToolBar;
import swing.swavecomponent.UserTool;
import swing.toolPlay;

/**
 *
 * @author Phan Qui Duc
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private CardLayout c;
    private ArrayList<Song> songLoveList = new ArrayList<>();
    private ArrayList<Song> songList = new ArrayList<>();
    private ArrayList<PlayList> playlist = new ArrayList<>();
    private String appItemName;
    public Login loginForm;

    public MainFrame() {
        initComponents();
        c = (CardLayout) pnlChange.getLayout();
        pnlMainScreen.main = this;
        pnlMyPlaylist.main = this;
        pnlSongOfPlaylistPane.main = this;
        toolPlay1.main = this;
        pnlLyrics.setVisible(false);
        pnlComment.setVisible(false);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlComment = new swing.CommentPane();
        jPanel1 = new javax.swing.JPanel();
        toolPlay1 = new swing.toolPlay();
        titleBar = new swing.javaswingdev.SimpleTitleBar();
        menuBar = new swing.swavecomponent.MenuBar();
        pnlChange = new javax.swing.JPanel();
        pnlLyrics = new swing.lyricsPane();
        pnlMainScreen = new panelMain.MainPanel();
        pnlCreatePlaylist = new javax.swing.JPanel();
        lblCreatePlaylist = new javax.swing.JLabel();
        pnlMyPlaylist = new panelMain.PlaylistPane();
        pnlLikeSong = new panelMain.SongLovelistPane();
        pnlSearch = new panelMain.SearchPane();
        pnlAddSong = new panelMain.AddSongPanel();
        pnlSongOfPlaylistPane = new swing.SongOfPlaylistPane();
        toolBar = new swing.swavecomponent.ToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1532, 810));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(pnlComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 43, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1532, 150));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolPlay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(toolPlay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 663, 1532, 150));
        getContentPane().add(titleBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1532, 29));
        getContentPane().add(menuBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 29, -1, 660));

        pnlChange.setOpaque(false);
        pnlChange.setPreferredSize(new java.awt.Dimension(1283, 590));
        pnlChange.setLayout(new java.awt.CardLayout());
        pnlChange.add(pnlLyrics, "cardLyrics");
        pnlChange.add(pnlMainScreen, "cardMain");

        lblCreatePlaylist.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCreatePlaylist.setText("Tạo playlist");
        pnlCreatePlaylist.add(lblCreatePlaylist);

        pnlChange.add(pnlCreatePlaylist, "card4");
        pnlChange.add(pnlMyPlaylist, "cardPlaylist");
        pnlChange.add(pnlLikeSong, "cardLove");
        pnlChange.add(pnlSearch, "cardSearch");
        pnlChange.add(pnlAddSong, "cardAddSong");
        pnlChange.add(pnlSongOfPlaylistPane, "cardSongOfPlaylist");

        getContentPane().add(pnlChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 108, -1, 555));
        getContentPane().add(toolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 29, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private void init() {
        this.getContentPane().setBackground(new Color(0, 0, 0, 255));
        titleBar.init(this);
        setResizable(false);
        GlassPanePopup.install(this);
        toolBar.getUserPanel().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                GlassPanePopup.showPopup(new UserTool(), new DefaultOption() {
                    @Override
                    public float opacity() {
                        return 0;
                    }

                    @Override
                    public LayoutCallback getLayoutCallBack(Component parent) {
                        return new DefaultLayoutCallBack(parent.getParent()) {
                            @Override
                            public void correctBounds(ComponentWrapper cw) {
                                if (parent.isVisible()) {
                                    cw.setBounds(this.getParent().getWidth() - toolBar.getUserPanel().getWidth(), this.getParent().getHeight() - 555 - 150, cw.getWidth(), cw.getHeight());
                                } else {
                                    super.correctBounds(cw);
                                }
                            }

                        };
                    }
                });
            }

        });
        c.show(pnlChange, "cardMain");

        //-----------------------------------
        //add my playlist:
        playlist.add(new PlayList(1, "LOFI 2021", 2023, true, "playlist/playlist1.jpg"));
        playlist.add(new PlayList(2, "HOT TREND 2023", 2023, true, "playlist/playlist2.jpg"));
        playlist.add(new PlayList(3, "NHẠC TIKTOK HAY", 2023, true, "playlist/playlist3.jpg"));
        playlist.add(new PlayList(4, "SAD SONGS", 2023, true, "playlist/playlist4.jpg"));
        playlist.add(new PlayList(5, "CHILL SONGS", 2023, true, "playlist/playlist1.jpg"));
        playlist.add(new PlayList(6, "NHẠC REMIX", 2023, true, "playlist/playlist6.jpg"));
        playlist.add(new PlayList(7, "SONG BTS", 2023, true, "playlist/playlist10.jpg"));
        playlist.add(new PlayList(8, "RAP SONGS", 2023, true, "playlist/playlist2.jpg"));
        playlist.add(new PlayList(9, "NHẠC CHILL 2023", 2023, true, "playlist/playlist4.jpg"));
        playlist.add(new PlayList(10, "CHILL LOFI 2023 ", 2023, true, "playlist/playlist10.jpg"));
        playlist.add(new PlayList(11, "TREND TIKTOK 2023 ", 2023, true, "playlist/playlist2.jpg"));
        playlist.add(new PlayList(12, "BÀI HÁY HAY ", 2023, true, "playlist/playlist12.jpg"));
        playlist.add(new PlayList(13, "CHILL STUDENTS ", 2023, true, "playlist/playlist13.jpg"));
        playlist.add(new PlayList(14, "SLEEP SONGS", 2023, true, "playlist/playlist14.jpg"));
        playlist.add(new PlayList(15, "CHILL SLEEP 2023", 2023, true, "playlist/playlist15.jpg"));
        playlist.add(new PlayList(16, "HOT SONGS", 2023, true, "playlist/playlist16.jpg"));
        playlist.add(new PlayList(17, "TIKTOK 2023", 2023, true, "playlist/playlist12.jpg"));
        playlist.add(new PlayList(18, "NHẠC TÂM TRẠNG", 2023, true, "playlist/playlist3.jpg"));
        playlist.add(new PlayList(19, "LOVE SONGS", 2023, true, "playlist/playlist19.jpg"));
        playlist.add(new PlayList(20, "NHẠC TRẺ REMIX", 2023, true, "playlist/playlist2.jpg"));

        for (PlayList playList : playlist) {
            pnlMyPlaylist.addList(playList);
            pnlMyPlaylist.addListLove(playList);
        }

        //------------------------------------
        //------------------------------------
        //add list playlist to pnl Menu
        for (PlayList item : playlist) {
            menuBar.addPlaylistList(item);
        }

        //------------------------------------
        //add list song to pnl songList
        //------------------------------------
        //add song to panel main
        songList.add(new Song(1, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(2, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(3, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(4, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(5, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(6, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(7, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(8, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(9, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(10, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(11, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(12, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(13, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(14, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(15, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));

        songList.add(new Song(16, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(17, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(18, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(19, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(20, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(21, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(22, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(23, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(24, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(25, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(26, "Nắng Ấm Xa Dần", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Nang_Am_Xa_Dan.jpg", "song.mp3", true, 1));
        songList.add(new Song(27, "Chấm Hết", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Cham-het.jpg", "song.mp3", true, 1));
        songList.add(new Song(28, "Chạy Ngay Đi", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Chay_ngay_di.png", "song.mp3", true, 1));
        songList.add(new Song(29, "Cơn Mưa Ngang Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Con-mua-ngang-qua.jpg", "song.mp3", true, 1));
        songList.add(new Song(30, "Em Của Ngày Hôm Qua", "Taylor Swift", "Sơn Tùng MTP", "Pop", "lyrics.txt", "Em-cua-ngay-hom-qua.jpg", "song.mp3", true, 1));

        for (Song item : songList) {
            pnlMainScreen.addTrendingSong(item);
            pnlAddSong.fillPnlListSongDetails(item);
            pnlSongOfPlaylistPane.addList(item);

            //add Song love for songLoveList:
            songLoveList.add(item);

        }

        //------------------------------------
        //add playlist to panel main
        for (PlayList item : playlist) {
            pnlMainScreen.addTopPlaylist(item);
            pnlSearch.getPnlSearchAll().addPlaylist(item);
            pnlSearch.getPnlSearchPlaylist().addList(item);
        }

        //add comment:
        pnlComment.addComment("Nguyễn Văn Sĩ", "Hay quá", 10, 1, "AVT.png");
        pnlComment.addComment("Trần Hoàng Danh", "Nghe đi nghe lại vẫn hay", 10, 1, "AVT.png");
        pnlComment.addComment("Phan Qúy Đức", "Tuyệt cú mèo", 11, 1, "AVT.png");
        pnlComment.addComment("Hồ Thị Mộng Tiên", "Ổn áp", 15, 1, "AVT.png");
        pnlComment.addComment("Tôn Nhật Phi", "Triệu like", 111, 1, "AVT.png");
        //add sự kiện cho nút play
        pnlLikeSong.getPnlSonglist().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlLikeSong.getPnlSonglist().setRunningSong(com);
                songItem.selectRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }
        });

        //add sự kiện cho nút play
        pnlMainScreen.getPnlTrendingSongList().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlMainScreen.getPnlTrendingSongList().setRunningSong(com);
                songItem.selectRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }
        });

        //add sự kiện cho nút play
        pnlSongOfPlaylistPane.getPnlSonglist().setEventLblStart(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
                SongItem songItem = (SongItem) com;
                songItem.getLblStart().setVisible(false);
                songItem.getLblWave().setVisible(true);
                pnlSongOfPlaylistPane.getPnlSonglist().setRunningSong(com);
                songItem.selectRunning(true);
            }

            @Override
            public void EnterEvent(Component com, Song song) {

            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }
        });

        //add sự kiện cho playlist item tại thanh menu bar
        menuBar.setEventPnlPlaylistItem(new EventItem() {
            @Override
            public void clickEvent(Component com, Song song) {
            }

            @Override
            public void clickEvent(Component com, PlayList playList) {
            }

            @Override
            public void EnterEvent(Component com, Song song) {
            }

            @Override
            public void ExitEvent(Component com, Song song, MouseEvent e) {
            }
        });

        //add Song love for Pane:
        for (Song data : songLoveList) {
            pnlLikeSong.getPnlSonglist().addSong(data);
        }

        //add Song trending
        for (Song data : songLoveList) {
            pnlMainScreen.getPnlTrendingSongList().addSong(data);
        }

        //Add lyrics:
        pnlLyrics.addLyric("Mùa thu mang giấc mơ quay về");
        pnlLyrics.addLyric("Vẫn nguyên vẹn như hôm nào");
        pnlLyrics.addLyric("Lá bay theo gió xôn xao chốn xưa anh chờ");
        pnlLyrics.addLyric("Đoạn đường ngày nào hai ta từng đón đưa");
        pnlLyrics.addLyric("Còn vấn vương không phai mờ");
        pnlLyrics.addLyric("Dấu yêu theo trong vần thơ.");
        pnlLyrics.addLyric("Chúng ta... là áng mây trên trời vội vàng ngang qua");
        pnlLyrics.addLyric("Chúng ta... chẳng thể nâng niu những câu thề");
        pnlLyrics.addLyric("Mùa thu mang giấc mơ quay về");
        pnlLyrics.addLyric("Vẫn nguyên vẹn như hôm nào");
        pnlLyrics.addLyric("Lá bay theo gió xôn xao chốn xưa anh chờ");
        pnlLyrics.addLyric("Đoạn đường ngày nào hai ta từng đón đưa");
        pnlLyrics.addLyric("Còn vấn vương không phai mờ");
        pnlLyrics.addLyric("Dấu yêu theo trong vần thơ.");
        pnlLyrics.addLyric("Chúng ta... là áng mây trên trời vội vàng ngang qua");
        pnlLyrics.addLyric("Chúng ta... chẳng thể nâng niu những câu thề");

        //Hiển thị icon tim theo bài hát yêu thích:
        pnlLikeSong.getPnlSonglist().setSongLove(songLoveList);
        pnlMainScreen.getPnlTrendingSongList().setSongLove(songLoveList);

        //------------------------------------
        menuBar.getLblLogo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardMain");
                pnlMainScreen.getCardLayout().show(pnlMainScreen, "cardMain");
                menuBar.getPnlHome().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlHome().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlMyPlaylists().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardPlaylist");
                menuBar.getPnlMyPlaylists().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlMyPlaylists().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlLikedSong().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardLove");
                menuBar.getPnlLikedSong().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlLikedSong().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }

        });

        menuBar.getPnlAddSong().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardAddSong");
                menuBar.getPnlAddSong().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlAddSong().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        menuBar.getPnlCreatePlaylist().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                menuBar.getPnlAddSong().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlCreatePlaylist().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        menuBar.getPnlHome().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                undoChosen(appItemName);
                c.show(pnlChange, "cardMain");
                pnlMainScreen.getCardLayout().show(pnlMainScreen, "cardMain");
                menuBar.getPnlHome().setBackground(new Color(76, 76, 76));
                appItemName = menuBar.getPnlHome().getName();
                menuBar.getPnlMenu().repaint();
                menuBar.getPnlMenu().revalidate();
            }
        });

        toolBar.getFindTextField().addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                if (!toolBar.getFindTextField().getText().equals("")) {

                    for (PlayList item : playlist) {
                        pnlSearch.getPnlSearchPlaylist().addPlayList(item);
                    }

                    for (Song item: songList) {
                        pnlSearch.getPnlSearchSong().addSong(item);
                        pnlSearch.getPnlSearchAll().addSong(item);
                    }        
                    c.show(pnlChange, "cardSearch");
                    repaint();
                }
            }
        });

    }

    private void undoChosen(String name) {
        if (menuBar.getPnlAddSong().getName().equals(name)) {
            menuBar.getPnlAddSong().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlCreatePlaylist().getName().equals(name)) {
            menuBar.getPnlCreatePlaylist().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlLikedSong().getName().equals(name)) {
            menuBar.getPnlLikedSong().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlMyPlaylists().getName().equals(name)) {
            menuBar.getPnlMyPlaylists().setBackground(new Color(0, 0, 0, 1));

        }
        if (menuBar.getPnlHome().getName().equals(name)) {
            menuBar.getPnlHome().setBackground(new Color(0, 0, 0, 1));

        }
    }

    public CardLayout getC() {
        return c;
    }

    public void setC(CardLayout c) {
        this.c = c;
    }

    public ArrayList<Song> getSongLoveList() {
        return songLoveList;
    }

    public void setSongLoveList(ArrayList<Song> songLoveList) {
        this.songLoveList = songLoveList;
    }

    public String getAppItemName() {
        return appItemName;
    }

    public void setAppItemName(String appItemName) {
        this.appItemName = appItemName;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JLabel getLblCreatePlaylist() {
        return lblCreatePlaylist;
    }

    public lyricsPane getPnlLyrics() {
        return pnlLyrics;
    }

    public void setPnlLyrics(lyricsPane pnlLyrics) {
        this.pnlLyrics = pnlLyrics;
    }

    public void setLblCreatePlaylist(JLabel lblCreatePlaylist) {
        this.lblCreatePlaylist = lblCreatePlaylist;
    }

    public void setMenuBar(MenuBar menuBar) {
        this.menuBar = menuBar;
    }

    public AddSongPanel getPnlAddSong() {
        return pnlAddSong;
    }

    public void setPnlAddSong(AddSongPanel pnlAddSong) {
        this.pnlAddSong = pnlAddSong;
    }

    public JPanel getPnlChange() {
        return pnlChange;
    }

    public void setPnlChange(JPanel pnlChange) {
        this.pnlChange = pnlChange;
    }

    public JPanel getPnlCreatePlaylist() {
        return pnlCreatePlaylist;
    }

    public void setPnlCreatePlaylist(JPanel pnlCreatePlaylist) {
        this.pnlCreatePlaylist = pnlCreatePlaylist;
    }

    public SongLovelistPane getPnlLikeSong() {
        return pnlLikeSong;
    }

    public void setPnlLikeSong(SongLovelistPane pnlLikeSong) {
        this.pnlLikeSong = pnlLikeSong;
    }

    public MainPanel getPnlMainScreen() {
        return pnlMainScreen;
    }

    public void setPnlMainScreen(MainPanel pnlMainScreen) {
        this.pnlMainScreen = pnlMainScreen;
    }

    public PlaylistPane getPnlMyPlaylist() {
        return pnlMyPlaylist;
    }

    public void setPnlMyPlaylist(PlaylistPane pnlMyPlaylist) {
        this.pnlMyPlaylist = pnlMyPlaylist;
    }

    public SearchPane getPnlSearch() {
        return pnlSearch;
    }

    public void setPnlSearch(SearchPane pnlSearch) {
        this.pnlSearch = pnlSearch;
    }

    public SongOfPlaylistPane getPnlSongOfPlaylistPane() {
        return pnlSongOfPlaylistPane;
    }

    public void setPnlSongOfPlaylistPane(SongOfPlaylistPane pnlSongOfPlaylistPane) {
        this.pnlSongOfPlaylistPane = pnlSongOfPlaylistPane;
    }

    public SimpleTitleBar getTitleBar() {
        return titleBar;
    }

    public void setTitleBar(SimpleTitleBar titleBar) {
        this.titleBar = titleBar;
    }

    public ToolBar getToolBar() {
        return toolBar;
    }

    public void setToolBar(ToolBar toolBar) {
        this.toolBar = toolBar;
    }

    public toolPlay getToolPlay1() {
        return toolPlay1;
    }

    public void setToolPlay1(toolPlay toolPlay1) {
        this.toolPlay1 = toolPlay1;
    }

    public CommentPane getPnlComment() {
        return pnlComment;
    }

    public void setPnlComment(CommentPane pnlComment) {
        this.pnlComment = pnlComment;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCreatePlaylist;
    private swing.swavecomponent.MenuBar menuBar;
    private panelMain.AddSongPanel pnlAddSong;
    private javax.swing.JPanel pnlChange;
    private swing.CommentPane pnlComment;
    private javax.swing.JPanel pnlCreatePlaylist;
    private panelMain.SongLovelistPane pnlLikeSong;
    private swing.lyricsPane pnlLyrics;
    private panelMain.MainPanel pnlMainScreen;
    private panelMain.PlaylistPane pnlMyPlaylist;
    private panelMain.SearchPane pnlSearch;
    private swing.SongOfPlaylistPane pnlSongOfPlaylistPane;
    private swing.javaswingdev.SimpleTitleBar titleBar;
    private swing.swavecomponent.ToolBar toolBar;
    private swing.toolPlay toolPlay1;
    // End of variables declaration//GEN-END:variables
}
